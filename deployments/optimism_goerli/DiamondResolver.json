{
  "address": "0xEFd71395EC103E25fdFe14e4261c8aF660cd4378",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENS",
          "name": "_ens",
          "type": "address"
        },
        {
          "internalType": "contract INameWrapper",
          "name": "_nameWrapper",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__InvalidInitializationParameters",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__RemoveTargetNotZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__ReplaceTargetIsIdentical",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__SelectorAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__SelectorIsImmutable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__SelectorNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__SelectorNotSpecified",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__TargetHasNoCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC165Base__InvalidInterfaceId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Ownable__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Ownable__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Ownable__NotTransitiveOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Proxy__ImplementationIsNotContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeOwnable__NotNomineeOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "Approved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondWritableInternal.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondWritableInternal.FacetCut[]",
          "name": "facetCuts",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nameWrapper",
          "type": "address"
        }
      ],
      "name": "SetNameWrapper",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "SetWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newVersion",
          "type": "uint64"
        }
      ],
      "name": "VersionChanged",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "clearRecords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondWritableInternal.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondWritableInternal.FacetCut[]",
          "name": "facetCuts",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "facetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "facet",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facetAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "facet",
          "type": "address"
        }
      ],
      "name": "facetFunctionSelectors",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "selectors",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondReadable.Facet[]",
          "name": "diamondFacets",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFallbackAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "fallbackAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "isApprovedFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "nodehash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicallWithNodeCheck",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nomineeOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "recordVersions",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fallbackAddress",
          "type": "address"
        }
      ],
      "name": "setFallbackAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4[]",
          "name": "interfaceId",
          "type": "bytes4[]"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setMultiSupportsInterface",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract INameWrapper",
          "name": "nameWrapper",
          "type": "address"
        }
      ],
      "name": "setNameWrapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setSupportsInterface",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setWhitelisted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterfaceUnoptimized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x51c3760a6dd424869dae949521b2969e4652f5dd5f0cc1a3db6a056243ac0e83",
  "receipt": {
    "to": null,
    "from": "0x000000187c72ee4a4120a3E626425595a34F185B",
    "contractAddress": "0xEFd71395EC103E25fdFe14e4261c8aF660cd4378",
    "transactionIndex": 1,
    "gasUsed": "3822209",
    "logsBloom": "0x
    "blockHash": "0x71321b97ca90838be9d9e66e22d708d1ab55f6a748e5a453bcf57edf66efd126",
    "transactionHash": "0x51c3760a6dd424869dae949521b2969e4652f5dd5f0cc1a3db6a056243ac0e83",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 7298260,
        "transactionHash": "0x51c3760a6dd424869dae949521b2969e4652f5dd5f0cc1a3db6a056243ac0e83",
        "address": "0xEFd71395EC103E25fdFe14e4261c8aF660cd4378",
        "topics": [
          "0x8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000efd71395ec103e25fdfe14e4261c8af660cd437800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000c2c4080590000000000000000000000000000000000000000000000000000000091423765000000000000000000000000000000000000000000000000000000001f931c1c000000000000000000000000000000000000000000000000000000007a0ed62700000000000000000000000000000000000000000000000000000000adfca15e0000000000000000000000000000000000000000000000000000000052ef6b2c00000000000000000000000000000000000000000000000000000000cdffacc60000000000000000000000000000000000000000000000000000000001ffc9a7000000000000000000000000000000000000000000000000000000008da5cb5b000000000000000000000000000000000000000000000000000000008ab5150a00000000000000000000000000000000000000000000000000000000f2fde38b0000000000000000000000000000000000000000000000000000000079ba5097000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 0,
        "blockHash": "0x71321b97ca90838be9d9e66e22d708d1ab55f6a748e5a453bcf57edf66efd126"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 7298260,
        "transactionHash": "0x51c3760a6dd424869dae949521b2969e4652f5dd5f0cc1a3db6a056243ac0e83",
        "address": "0xEFd71395EC103E25fdFe14e4261c8aF660cd4378",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000000000187c72ee4a4120a3e626425595a34f185b"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x71321b97ca90838be9d9e66e22d708d1ab55f6a748e5a453bcf57edf66efd126"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 7298260,
        "transactionHash": "0x51c3760a6dd424869dae949521b2969e4652f5dd5f0cc1a3db6a056243ac0e83",
        "address": "0x148a550805893F1f53Cf8EFE6FA52488298bDcD9",
        "topics": [
          "0x6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e92",
          "0x000000000000000000000000efd71395ec103e25fdfe14e4261c8af660cd4378",
          "0xdeb98c420983df94da68545b9878e8e6e172d73f61b92e22e9516c8d562713f2"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x71321b97ca90838be9d9e66e22d708d1ab55f6a748e5a453bcf57edf66efd126"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 7298260,
        "transactionHash": "0x51c3760a6dd424869dae949521b2969e4652f5dd5f0cc1a3db6a056243ac0e83",
        "address": "0x796b0264191273C44e714ba546F6C3fdee76a4cE",
        "topics": [
          "0xce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e82",
          "0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2",
          "0x8f22d549f9ca1e9857d691052824109a1857b8d7013a2c5ce25e49ec921b0eec"
        ],
        "data": "0x000000000000000000000000000000187c72ee4a4120a3e626425595a34f185b",
        "logIndex": 3,
        "blockHash": "0x71321b97ca90838be9d9e66e22d708d1ab55f6a748e5a453bcf57edf66efd126"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 7298260,
        "transactionHash": "0x51c3760a6dd424869dae949521b2969e4652f5dd5f0cc1a3db6a056243ac0e83",
        "address": "0x796b0264191273C44e714ba546F6C3fdee76a4cE",
        "topics": [
          "0x335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a0",
          "0xdeb98c420983df94da68545b9878e8e6e172d73f61b92e22e9516c8d562713f2"
        ],
        "data": "0x00000000000000000000000084fa9a6ce9ddd062a945d2bb6991f75216c167da",
        "logIndex": 4,
        "blockHash": "0x71321b97ca90838be9d9e66e22d708d1ab55f6a748e5a453bcf57edf66efd126"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 7298260,
        "transactionHash": "0x51c3760a6dd424869dae949521b2969e4652f5dd5f0cc1a3db6a056243ac0e83",
        "address": "0xEFd71395EC103E25fdFe14e4261c8aF660cd4378",
        "topics": [
          "0x2a3953a00c61e46ecb4a26a52aba9acbbf214c988422bb25322bf64fc5cc15fd",
          "0x000000000000000000000000ea926eb6996235c2b47f95b7bff3f4058b988e35"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x71321b97ca90838be9d9e66e22d708d1ab55f6a748e5a453bcf57edf66efd126"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 7298260,
        "transactionHash": "0x51c3760a6dd424869dae949521b2969e4652f5dd5f0cc1a3db6a056243ac0e83",
        "address": "0xEFd71395EC103E25fdFe14e4261c8aF660cd4378",
        "topics": [
          "0x8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000efd71395ec103e25fdfe14e4261c8af660cd4378000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000008371412f1000000000000000000000000000000000000000000000000000000009281aa0b00000000000000000000000000000000000000000000000000000000a22cb46500000000000000000000000000000000000000000000000000000000e985e9c500000000000000000000000000000000000000000000000000000000a4b91a0100000000000000000000000000000000000000000000000000000000a9784b3e00000000000000000000000000000000000000000000000000000000d700ff33000000000000000000000000000000000000000000000000000000003603d758000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 6,
        "blockHash": "0x71321b97ca90838be9d9e66e22d708d1ab55f6a748e5a453bcf57edf66efd126"
      }
    ],
    "blockNumber": 7298260,
    "cumulativeGasUsed": "3869122",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x796b0264191273C44e714ba546F6C3fdee76a4cE",
    "0xeA926EB6996235c2b47F95B7BFF3F4058B988E35"
  ],
  "numDeployments": 1,
  "solcInputHash": "91e3d18d867513e07667692692838182",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"_ens\",\"type\":\"address\"},{\"internalType\":\"contract INameWrapper\",\"name\":\"_nameWrapper\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DiamondWritable__InvalidInitializationParameters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__RemoveTargetNotZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__ReplaceTargetIsIdentical\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__SelectorAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__SelectorIsImmutable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__SelectorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__SelectorNotSpecified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__TargetHasNoCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC165Base__InvalidInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ownable__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ownable__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ownable__NotTransitiveOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Proxy__ImplementationIsNotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeOwnable__NotNomineeOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondWritableInternal.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondWritableInternal.FacetCut[]\",\"name\":\"facetCuts\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nameWrapper\",\"type\":\"address\"}],\"name\":\"SetNameWrapper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"SetWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newVersion\",\"type\":\"uint64\"}],\"name\":\"VersionChanged\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"clearRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondWritableInternal.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondWritableInternal.FacetCut[]\",\"name\":\"facetCuts\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondReadable.Facet[]\",\"name\":\"diamondFacets\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFallbackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fallbackAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"isApprovedFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nodehash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicallWithNodeCheck\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nomineeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"recordVersions\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fallbackAddress\",\"type\":\"address\"}],\"name\":\"setFallbackAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"interfaceId\",\"type\":\"bytes4[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setMultiSupportsInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INameWrapper\",\"name\":\"nameWrapper\",\"type\":\"address\"}],\"name\":\"setNameWrapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setSupportsInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterfaceUnoptimized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(bytes32,address,bool)\":{\"details\":\"Approve a delegate to be able to updated records on a node.\"},\"clearRecords(bytes32)\":{\"params\":{\"node\":\"The node to update.\"}},\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"params\":{\"data\":\"optional initialization function call data\",\"facetCuts\":\"array of structured Diamond facet update data\",\"target\":\"optional target of initialization delegatecall\"}},\"facetAddress(bytes4)\":{\"params\":{\"selector\":\"function selector to query\"},\"returns\":{\"facet\":\"facet address (zero address if not found)\"}},\"facetAddresses()\":{\"returns\":{\"addresses\":\"array of facet addresses\"}},\"facetFunctionSelectors(address)\":{\"params\":{\"facet\":\"address of facet to query\"},\"returns\":{\"selectors\":\"array of function selectors\"}},\"facets()\":{\"returns\":{\"diamondFacets\":\"array of structured facet data\"}},\"getFallbackAddress()\":{\"returns\":{\"fallbackAddress\":\"address of fallback implementation\"}},\"isApprovedFor(address,bytes32,address)\":{\"details\":\"Check to see if the delegate has been approved by the owner for the node.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"returns\":{\"_0\":\"contract owner\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setFallbackAddress(address)\":{\"params\":{\"fallbackAddress\":\"address of fallback implementation\"}},\"transferOwnership(address)\":{\"params\":{\"account\":\"address of new owner\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"accept transfer of contract ownership\"},\"clearRecords(bytes32)\":{\"notice\":\"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry.\"},\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"update diamond facets and optionally execute arbitrary initialization function\"},\"facetAddress(bytes4)\":{\"notice\":\"get the address of the facet associated with given selector\"},\"facetAddresses()\":{\"notice\":\"get addresses of all facets used by diamond\"},\"facetFunctionSelectors(address)\":{\"notice\":\"get all selectors for given facet address\"},\"facets()\":{\"notice\":\"get all facets and their selectors\"},\"getFallbackAddress()\":{\"notice\":\"query the address of the fallback implementation\"},\"nomineeOwner()\":{\"notice\":\"get the nominated owner who has permission to call acceptOwnership\"},\"owner()\":{\"notice\":\"get the ERC173 contract owner\"},\"setFallbackAddress(address)\":{\"notice\":\"set the address of the fallback implementation\"},\"transferOwnership(address)\":{\"notice\":\"transfer contract ownership to new account\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/diamond-resolver/DiamondResolver.sol\":\"DiamondResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2499},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { IOwnableInternal } from './IOwnableInternal.sol';\\n\\ninterface IOwnable is IOwnableInternal, IERC173 {}\\n\",\"keccak256\":\"0xee77272fcf35108e2103ebb4f5d68d46844c447d9d2e411f8f9136298ae1bc2c\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/IOwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173Internal } from '../../interfaces/IERC173Internal.sol';\\n\\ninterface IOwnableInternal is IERC173Internal {\\n    error Ownable__NotOwner();\\n    error Ownable__NotTransitiveOwner();\\n}\\n\",\"keccak256\":\"0x6237a634712261bd82d5c7753780d35f77af215406d1e59512052f743f8f1c60\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/ISafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IOwnable } from './IOwnable.sol';\\nimport { ISafeOwnableInternal } from './ISafeOwnableInternal.sol';\\n\\ninterface ISafeOwnable is ISafeOwnableInternal, IOwnable {\\n    /**\\n     * @notice get the nominated owner who has permission to call acceptOwnership\\n     */\\n    function nomineeOwner() external view returns (address);\\n\\n    /**\\n     * @notice accept transfer of contract ownership\\n     */\\n    function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xfb9a7920498ab2bb3d493c292c40223eb3a6631431ea381ca39274b165c60102\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/ISafeOwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IOwnableInternal } from './IOwnableInternal.sol';\\n\\ninterface ISafeOwnableInternal is IOwnableInternal {\\n    error SafeOwnable__NotNomineeOwner();\\n}\\n\",\"keccak256\":\"0xd5d44576a2f82b4ffdcf29feec6043e82436011784d92567a968609aa49a0f6b\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { IOwnable } from './IOwnable.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\n\\n/**\\n * @title Ownership access control based on ERC173\\n */\\nabstract contract Ownable is IOwnable, OwnableInternal {\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function transferOwnership(address account) public virtual onlyOwner {\\n        _transferOwnership(account);\\n    }\\n}\\n\",\"keccak256\":\"0xe16b09090c1251f8cc97fb2cc10c86675e0d0d9f0fc0032b417c37c8dba2db5f\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { IOwnableInternal } from './IOwnableInternal.sol';\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal is IOwnableInternal {\\n    using AddressUtils for address;\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != _owner()) revert Ownable__NotOwner();\\n        _;\\n    }\\n\\n    modifier onlyTransitiveOwner() {\\n        if (msg.sender != _transitiveOwner())\\n            revert Ownable__NotTransitiveOwner();\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transitiveOwner() internal view virtual returns (address owner) {\\n        owner = _owner();\\n\\n        while (owner.isContract()) {\\n            try IERC173(owner).owner() returns (address transitiveOwner) {\\n                owner = transitiveOwner;\\n            } catch {\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        _setOwner(account);\\n    }\\n\\n    function _setOwner(address account) internal virtual {\\n        OwnableStorage.Layout storage l = OwnableStorage.layout();\\n        emit OwnershipTransferred(l.owner, account);\\n        l.owner = account;\\n    }\\n}\\n\",\"keccak256\":\"0x0185d24250a5e6fbafce443b9ba19bba761803e3e5d91ba423bfb1f5f0bbdbf9\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7385e2020de914f75cabdc83c6adf88ed21e9de14669a89b3832b80f4f8c7b73\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { Ownable } from './Ownable.sol';\\nimport { ISafeOwnable } from './ISafeOwnable.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\nimport { SafeOwnableInternal } from './SafeOwnableInternal.sol';\\n\\n/**\\n * @title Ownership access control based on ERC173 with ownership transfer safety check\\n */\\nabstract contract SafeOwnable is ISafeOwnable, Ownable, SafeOwnableInternal {\\n    /**\\n     * @inheritdoc ISafeOwnable\\n     */\\n    function nomineeOwner() public view virtual returns (address) {\\n        return _nomineeOwner();\\n    }\\n\\n    /**\\n     * @inheritdoc ISafeOwnable\\n     */\\n    function acceptOwnership() public virtual onlyNomineeOwner {\\n        _acceptOwnership();\\n    }\\n\\n    function _transferOwnership(\\n        address account\\n    ) internal virtual override(OwnableInternal, SafeOwnableInternal) {\\n        super._transferOwnership(account);\\n    }\\n}\\n\",\"keccak256\":\"0x84d5694ad1f6cc77170ec667b02080dca1ccdde26eddaf46960d95971df1a5f1\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/SafeOwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ISafeOwnableInternal } from './ISafeOwnableInternal.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\nimport { SafeOwnableStorage } from './SafeOwnableStorage.sol';\\n\\nabstract contract SafeOwnableInternal is ISafeOwnableInternal, OwnableInternal {\\n    modifier onlyNomineeOwner() {\\n        if (msg.sender != _nomineeOwner())\\n            revert SafeOwnable__NotNomineeOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @notice get the nominated owner who has permission to call acceptOwnership\\n     */\\n    function _nomineeOwner() internal view virtual returns (address) {\\n        return SafeOwnableStorage.layout().nomineeOwner;\\n    }\\n\\n    /**\\n     * @notice accept transfer of contract ownership\\n     */\\n    function _acceptOwnership() internal virtual {\\n        _setOwner(msg.sender);\\n        delete SafeOwnableStorage.layout().nomineeOwner;\\n    }\\n\\n    /**\\n     * @notice set nominee owner, granting permission to call acceptOwnership\\n     */\\n    function _transferOwnership(address account) internal virtual override {\\n        SafeOwnableStorage.layout().nomineeOwner = account;\\n    }\\n}\\n\",\"keccak256\":\"0x37c50898938e52163f6d42d6e03e845a131013c7bbbc90e5dc6c26dd89782e39\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/SafeOwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary SafeOwnableStorage {\\n    struct Layout {\\n        address nomineeOwner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.SafeOwnable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4818afb0b39e0770f881cbeaea1b1c77fba0daaa64bd8c1361d6e3a197628e93\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc250e493770feaa0da8e5a55d241712c1c6526caa7d8df2455c3e5fa25124c0b\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173Internal } from './IERC173Internal.sol';\\n\\n/**\\n * @title Contract ownership standard interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173 is IERC173Internal {\\n    /**\\n     * @notice get the ERC173 contract owner\\n     * @return contract owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice transfer contract ownership to new account\\n     * @param account address of new owner\\n     */\\n    function transferOwnership(address account) external;\\n}\\n\",\"keccak256\":\"0xf1c1fbf0ec82110c29d549db1fbd8ec728ba0b995dc5f087e0a5464243135dce\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC173Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC173 interface needed by internal functions\\n */\\ninterface IERC173Internal {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n}\\n\",\"keccak256\":\"0x9644c3e56c9ecd1763f8aaa437d5d573a7f64a8d93ad7bea1a9c44beb5911b89\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165BaseInternal is IERC165BaseInternal {\\n    /**\\n     * @notice indicates whether an interface is already supported based on the interfaceId\\n     * @param interfaceId id of interface to check\\n     * @return bool indicating whether interface is supported\\n     */\\n    function _supportsInterface(\\n        bytes4 interfaceId\\n    ) internal view virtual returns (bool) {\\n        return ERC165BaseStorage.layout().supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @notice sets status of interface support\\n     * @param interfaceId id of interface to set status for\\n     * @param status boolean indicating whether interface will be set as supported\\n     */\\n    function _setSupportsInterface(\\n        bytes4 interfaceId,\\n        bool status\\n    ) internal virtual {\\n        if (interfaceId == 0xffffffff) revert ERC165Base__InvalidInterfaceId();\\n        ERC165BaseStorage.layout().supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0xad163d89454d9c8a018880253c5be156ee0f847f05a392a12b2a7061c7fa8682\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC165BaseStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd1cfba40f8aabda5898ffe21adeeea8c7011da12bfdad7f7aa0cf87b3635653\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165Internal } from '../../../interfaces/IERC165Internal.sol';\\n\\ninterface IERC165BaseInternal is IERC165Internal {\\n    error ERC165Base__InvalidInterfaceId();\\n}\\n\",\"keccak256\":\"0xccda4b118c8c09c276a0e577168aa404ea6207aad6b384b04f5f3a8923316422\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IProxy {\\n    error Proxy__ImplementationIsNotContract();\\n\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0x2a06657ce005059e60a0765fe090240732d910fc38de43ca8fd48804bb86c5e4\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { AddressUtils } from '../utils/AddressUtils.sol';\\nimport { IProxy } from './IProxy.sol';\\n\\n/**\\n * @title Base proxy contract\\n */\\nabstract contract Proxy is IProxy {\\n    using AddressUtils for address;\\n\\n    /**\\n     * @notice delegate all calls to implementation contract\\n     * @dev reverts if implementation address contains no code, for compatibility with metamorphic contracts\\n     * @dev memory location in use by assembly may be unsafe in other contexts\\n     */\\n    fallback() external payable virtual {\\n        address implementation = _getImplementation();\\n\\n        if (!implementation.isContract())\\n            revert Proxy__ImplementationIsNotContract();\\n\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(\\n                gas(),\\n                implementation,\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice get logic implementation address\\n     * @return implementation address\\n     */\\n    function _getImplementation() internal virtual returns (address);\\n}\\n\",\"keccak256\":\"0x4d6ba63d71b8cddb57746d564cc904931d1ee479052a19f902787417ee5d97a8\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/ISolidStateDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ISafeOwnable } from '../../access/ownable/ISafeOwnable.sol';\\nimport { IERC165 } from '../../interfaces/IERC165.sol';\\nimport { IDiamondBase } from './base/IDiamondBase.sol';\\nimport { IDiamondFallback } from './fallback/IDiamondFallback.sol';\\nimport { IDiamondReadable } from './readable/IDiamondReadable.sol';\\nimport { IDiamondWritable } from './writable/IDiamondWritable.sol';\\n\\ninterface ISolidStateDiamond is\\n    IDiamondBase,\\n    IDiamondFallback,\\n    IDiamondReadable,\\n    IDiamondWritable,\\n    ISafeOwnable,\\n    IERC165\\n{\\n    receive() external payable;\\n}\\n\",\"keccak256\":\"0x541fe148acc6b9331149498d6f66308761a650da10c9bd8f9e933bdfec52f730\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/base/DiamondBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { Proxy } from '../../Proxy.sol';\\nimport { IDiamondBase } from './IDiamondBase.sol';\\nimport { DiamondBaseStorage } from './DiamondBaseStorage.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy base contract\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\nabstract contract DiamondBase is IDiamondBase, Proxy {\\n    /**\\n     * @inheritdoc Proxy\\n     */\\n    function _getImplementation()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address implementation)\\n    {\\n        // inline storage layout retrieval uses less gas\\n        DiamondBaseStorage.Layout storage l;\\n        bytes32 slot = DiamondBaseStorage.STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n\\n        implementation = address(bytes20(l.facets[msg.sig]));\\n    }\\n}\\n\",\"keccak256\":\"0x6712d6c7bee937ac07ee00eeaa30895634fbd3cda7f5b5c179a2331ad05623df\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/base/DiamondBaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nlibrary DiamondBaseStorage {\\n    struct Layout {\\n        // function selector => (facet address, selector slot position)\\n        mapping(bytes4 => bytes32) facets;\\n        // total number of selectors registered\\n        uint16 selectorCount;\\n        // array of selector slots with 8 selectors per slot\\n        mapping(uint256 => bytes32) selectorSlots;\\n        address fallbackAddress;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.DiamondBase');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x74365666c0e9917d742bbab21e174dea6bc6ccf6146153e43dd9d9fe8417a36a\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/base/IDiamondBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IProxy } from '../../IProxy.sol';\\n\\ninterface IDiamondBase is IProxy {}\\n\",\"keccak256\":\"0x3329852027ffb50519a245376a1dee8f828223c0fa439bbb16a80a1bc226c2fa\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/fallback/DiamondFallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { OwnableInternal } from '../../../access/ownable/OwnableInternal.sol';\\nimport { DiamondBase } from '../base/DiamondBase.sol';\\nimport { DiamondBaseStorage } from '../base/DiamondBaseStorage.sol';\\nimport { IDiamondFallback } from './IDiamondFallback.sol';\\n\\n// TODO: DiamondFallback interface\\n\\n/**\\n * @title Fallback feature for EIP-2535 \\\"Diamond\\\" proxy\\n */\\nabstract contract DiamondFallback is\\n    IDiamondFallback,\\n    OwnableInternal,\\n    DiamondBase\\n{\\n    /**\\n     * @inheritdoc IDiamondFallback\\n     */\\n    function getFallbackAddress()\\n        external\\n        view\\n        returns (address fallbackAddress)\\n    {\\n        fallbackAddress = _getFallbackAddress();\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondFallback\\n     */\\n    function setFallbackAddress(address fallbackAddress) external onlyOwner {\\n        _setFallbackAddress(fallbackAddress);\\n    }\\n\\n    /**\\n     * @inheritdoc DiamondBase\\n     * @notice query custom fallback address is no implementation is found\\n     */\\n    function _getImplementation()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address implementation)\\n    {\\n        implementation = super._getImplementation();\\n\\n        if (implementation == address(0)) {\\n            implementation = _getFallbackAddress();\\n        }\\n    }\\n\\n    /**\\n     * @notice query the address of the fallback implementation\\n     * @return fallbackAddress address of fallback implementation\\n     */\\n    function _getFallbackAddress()\\n        internal\\n        view\\n        virtual\\n        returns (address fallbackAddress)\\n    {\\n        fallbackAddress = DiamondBaseStorage.layout().fallbackAddress;\\n    }\\n\\n    /**\\n     * @notice set the address of the fallback implementation\\n     * @param fallbackAddress address of fallback implementation\\n     */\\n    function _setFallbackAddress(address fallbackAddress) internal virtual {\\n        DiamondBaseStorage.layout().fallbackAddress = fallbackAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x22b541ba05979a4decc7c2f191aac3d873e44171fd1c3cbcca55e45651eaf024\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/fallback/IDiamondFallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IDiamondBase } from '../base/IDiamondBase.sol';\\n\\ninterface IDiamondFallback is IDiamondBase {\\n    /**\\n     * @notice query the address of the fallback implementation\\n     * @return fallbackAddress address of fallback implementation\\n     */\\n    function getFallbackAddress()\\n        external\\n        view\\n        returns (address fallbackAddress);\\n\\n    /**\\n     * @notice set the address of the fallback implementation\\n     * @param fallbackAddress address of fallback implementation\\n     */\\n    function setFallbackAddress(address fallbackAddress) external;\\n}\\n\",\"keccak256\":\"0x1b52280562511510101b03ea1c73d64645770582ba72aad8bb1633ccc8ae6d42\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/readable/DiamondReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { DiamondBaseStorage } from '../base/DiamondBaseStorage.sol';\\nimport { IDiamondReadable } from './IDiamondReadable.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy introspection contract\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nabstract contract DiamondReadable is IDiamondReadable {\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facets() external view returns (Facet[] memory diamondFacets) {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        diamondFacets = new Facet[](l.selectorCount);\\n\\n        uint8[] memory numFacetSelectors = new uint8[](l.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(l.facets[selector]));\\n\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (diamondFacets[facetIndex].target == facet) {\\n                        diamondFacets[facetIndex].selectors[\\n                            numFacetSelectors[facetIndex]\\n                        ] = selector;\\n                        // probably will never have more than 256 functions from one facet contract\\n                        require(numFacetSelectors[facetIndex] < 255);\\n                        numFacetSelectors[facetIndex]++;\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) {\\n                    continue;\\n                }\\n\\n                diamondFacets[numFacets].target = facet;\\n                diamondFacets[numFacets].selectors = new bytes4[](\\n                    l.selectorCount\\n                );\\n                diamondFacets[numFacets].selectors[0] = selector;\\n                numFacetSelectors[numFacets] = 1;\\n                numFacets++;\\n            }\\n        }\\n\\n        for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n            uint256 numSelectors = numFacetSelectors[facetIndex];\\n            bytes4[] memory selectors = diamondFacets[facetIndex].selectors;\\n\\n            // setting the number of selectors\\n            assembly {\\n                mstore(selectors, numSelectors)\\n            }\\n        }\\n\\n        // setting the number of facets\\n        assembly {\\n            mstore(diamondFacets, numFacets)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetFunctionSelectors(\\n        address facet\\n    ) external view returns (bytes4[] memory selectors) {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        selectors = new bytes4[](l.selectorCount);\\n\\n        uint256 numSelectors;\\n        uint256 selectorIndex;\\n\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n\\n                if (facet == address(bytes20(l.facets[selector]))) {\\n                    selectors[numSelectors] = selector;\\n                    numSelectors++;\\n                }\\n            }\\n        }\\n\\n        // set the number of selectors in the array\\n        assembly {\\n            mstore(selectors, numSelectors)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory addresses)\\n    {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        addresses = new address[](l.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(l.facets[selector]));\\n\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facet == addresses[facetIndex]) {\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) {\\n                    continue;\\n                }\\n\\n                addresses[numFacets] = facet;\\n                numFacets++;\\n            }\\n        }\\n\\n        // set the number of facet addresses in the array\\n        assembly {\\n            mstore(addresses, numFacets)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetAddress(\\n        bytes4 selector\\n    ) external view returns (address facet) {\\n        facet = address(bytes20(DiamondBaseStorage.layout().facets[selector]));\\n    }\\n}\\n\",\"keccak256\":\"0x03fd06c9bd8642a42ece1d9f75c9e99869a06f4310fa9fe80df924ff68984036\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/readable/IDiamondReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Diamond proxy introspection interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondReadable {\\n    struct Facet {\\n        address target;\\n        bytes4[] selectors;\\n    }\\n\\n    /**\\n     * @notice get all facets and their selectors\\n     * @return diamondFacets array of structured facet data\\n     */\\n    function facets() external view returns (Facet[] memory diamondFacets);\\n\\n    /**\\n     * @notice get all selectors for given facet address\\n     * @param facet address of facet to query\\n     * @return selectors array of function selectors\\n     */\\n    function facetFunctionSelectors(\\n        address facet\\n    ) external view returns (bytes4[] memory selectors);\\n\\n    /**\\n     * @notice get addresses of all facets used by diamond\\n     * @return addresses array of facet addresses\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory addresses);\\n\\n    /**\\n     * @notice get the address of the facet associated with given selector\\n     * @param selector function selector to query\\n     * @return facet facet address (zero address if not found)\\n     */\\n    function facetAddress(\\n        bytes4 selector\\n    ) external view returns (address facet);\\n}\\n\",\"keccak256\":\"0xe3536079514a210e74f6e93b62525d451ed75c50c82773f9574c24e886ebe1ed\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/writable/DiamondWritable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { OwnableInternal } from '../../../access/ownable/OwnableInternal.sol';\\nimport { IDiamondWritable } from './IDiamondWritable.sol';\\nimport { DiamondWritableInternal } from './DiamondWritableInternal.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy update contract\\n */\\nabstract contract DiamondWritable is\\n    IDiamondWritable,\\n    DiamondWritableInternal,\\n    OwnableInternal\\n{\\n    /**\\n     * @inheritdoc IDiamondWritable\\n     */\\n    function diamondCut(\\n        FacetCut[] calldata facetCuts,\\n        address target,\\n        bytes calldata data\\n    ) external onlyOwner {\\n        _diamondCut(facetCuts, target, data);\\n    }\\n}\\n\",\"keccak256\":\"0xf481debe21720da2aa6a26492a57469b3592da44867935bc432f9ac8ffcdddd2\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/writable/DiamondWritableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { DiamondBaseStorage } from '../base/DiamondBaseStorage.sol';\\nimport { IDiamondWritableInternal } from './IDiamondWritableInternal.sol';\\n\\nabstract contract DiamondWritableInternal is IDiamondWritableInternal {\\n    using AddressUtils for address;\\n\\n    bytes32 private constant CLEAR_ADDRESS_MASK =\\n        bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 private constant CLEAR_SELECTOR_MASK =\\n        bytes32(uint256(0xffffffff << 224));\\n\\n    /**\\n     * @notice update functions callable on Diamond proxy\\n     * @param facetCuts array of structured Diamond facet update data\\n     * @param target optional recipient of initialization delegatecall\\n     * @param data optional initialization call data\\n     */\\n    function _diamondCut(\\n        FacetCut[] memory facetCuts,\\n        address target,\\n        bytes memory data\\n    ) internal {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        unchecked {\\n            uint256 originalSelectorCount = l.selectorCount;\\n            uint256 selectorCount = originalSelectorCount;\\n            bytes32 selectorSlot;\\n\\n            // Check if last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                // get last selectorSlot\\n                selectorSlot = l.selectorSlots[selectorCount >> 3];\\n            }\\n\\n            for (uint256 i; i < facetCuts.length; i++) {\\n                FacetCut memory facetCut = facetCuts[i];\\n                FacetCutAction action = facetCut.action;\\n\\n                if (facetCut.selectors.length == 0)\\n                    revert DiamondWritable__SelectorNotSpecified();\\n\\n                if (action == FacetCutAction.ADD) {\\n                    (selectorCount, selectorSlot) = _addFacetSelectors(\\n                        l,\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                } else if (action == FacetCutAction.REPLACE) {\\n                    _replaceFacetSelectors(l, facetCut);\\n                } else if (action == FacetCutAction.REMOVE) {\\n                    (selectorCount, selectorSlot) = _removeFacetSelectors(\\n                        l,\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                }\\n            }\\n\\n            if (selectorCount != originalSelectorCount) {\\n                l.selectorCount = uint16(selectorCount);\\n            }\\n\\n            // If last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n            }\\n\\n            emit DiamondCut(facetCuts, target, data);\\n            _initialize(target, data);\\n        }\\n    }\\n\\n    function _addFacetSelectors(\\n        DiamondBaseStorage.Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            if (\\n                facetCut.target != address(this) &&\\n                !facetCut.target.isContract()\\n            ) revert DiamondWritable__TargetHasNoCode();\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                if (address(bytes20(oldFacet)) != address(0))\\n                    revert DiamondWritable__SelectorAlreadyAdded();\\n\\n                // add facet for selector\\n                l.facets[selector] =\\n                    bytes20(facetCut.target) |\\n                    bytes32(selectorCount);\\n                uint256 selectorInSlotPosition = (selectorCount & 7) << 5;\\n\\n                // clear selector position in slot and add selector\\n                selectorSlot =\\n                    (selectorSlot &\\n                        ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\\n                    (bytes32(selector) >> selectorInSlotPosition);\\n\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n                    selectorSlot = 0;\\n                }\\n\\n                selectorCount++;\\n            }\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function _removeFacetSelectors(\\n        DiamondBaseStorage.Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            if (facetCut.target != address(0))\\n                revert DiamondWritable__RemoveTargetNotZeroAddress();\\n\\n            uint256 selectorSlotCount = selectorCount >> 3;\\n            uint256 selectorInSlotIndex = selectorCount & 7;\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                if (address(bytes20(oldFacet)) == address(0))\\n                    revert DiamondWritable__SelectorNotFound();\\n\\n                if (address(bytes20(oldFacet)) == address(this))\\n                    revert DiamondWritable__SelectorIsImmutable();\\n\\n                if (selectorSlot == 0) {\\n                    selectorSlotCount--;\\n                    selectorSlot = l.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n\\n                // adding a block here prevents stack too deep error\\n                {\\n                    // replace selector with last selector in l.facets\\n                    lastSelector = bytes4(\\n                        selectorSlot << (selectorInSlotIndex << 5)\\n                    );\\n\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        l.facets[lastSelector] =\\n                            (oldFacet & CLEAR_ADDRESS_MASK) |\\n                            bytes20(l.facets[lastSelector]);\\n                    }\\n\\n                    delete l.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = l.selectorSlots[\\n                        oldSelectorsSlotCount\\n                    ];\\n\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n\\n                    // update storage with the modified slot\\n                    l.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    selectorSlot =\\n                        (selectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n\\n                if (selectorInSlotIndex == 0) {\\n                    delete l.selectorSlots[selectorSlotCount];\\n                    selectorSlot = 0;\\n                }\\n            }\\n\\n            selectorCount = (selectorSlotCount << 3) | selectorInSlotIndex;\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function _replaceFacetSelectors(\\n        DiamondBaseStorage.Layout storage l,\\n        FacetCut memory facetCut\\n    ) internal {\\n        unchecked {\\n            if (!facetCut.target.isContract())\\n                revert DiamondWritable__TargetHasNoCode();\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n\\n                if (oldFacetAddress == address(0))\\n                    revert DiamondWritable__SelectorNotFound();\\n                if (oldFacetAddress == address(this))\\n                    revert DiamondWritable__SelectorIsImmutable();\\n                if (oldFacetAddress == facetCut.target)\\n                    revert DiamondWritable__ReplaceTargetIsIdentical();\\n\\n                // replace old facet address\\n                l.facets[selector] =\\n                    (oldFacet & CLEAR_ADDRESS_MASK) |\\n                    bytes20(facetCut.target);\\n            }\\n        }\\n    }\\n\\n    function _initialize(address target, bytes memory data) private {\\n        if ((target == address(0)) != (data.length == 0))\\n            revert DiamondWritable__InvalidInitializationParameters();\\n\\n        if (target != address(0)) {\\n            if (target != address(this)) {\\n                if (!target.isContract())\\n                    revert DiamondWritable__TargetHasNoCode();\\n            }\\n\\n            (bool success, ) = target.delegatecall(data);\\n\\n            if (!success) {\\n                assembly {\\n                    returndatacopy(0, 0, returndatasize())\\n                    revert(0, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9bc52044616cc2058d15aa07455f9ab4a2d6b0cb4bd542d6b5b8df092b501387\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/writable/IDiamondWritable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IDiamondWritableInternal } from './IDiamondWritableInternal.sol';\\n\\n/**\\n * @title Diamond proxy upgrade interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondWritable is IDiamondWritableInternal {\\n    /**\\n     * @notice update diamond facets and optionally execute arbitrary initialization function\\n     * @param facetCuts array of structured Diamond facet update data\\n     * @param target optional target of initialization delegatecall\\n     * @param data optional initialization function call data\\n     */\\n    function diamondCut(\\n        FacetCut[] calldata facetCuts,\\n        address target,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3d7dd0fa5d4cef8889d507880fe68d0b1558f6c21c5855170c44ef7e2b05bcef\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/writable/IDiamondWritableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IDiamondWritableInternal {\\n    enum FacetCutAction {\\n        ADD,\\n        REPLACE,\\n        REMOVE\\n    }\\n\\n    event DiamondCut(FacetCut[] facetCuts, address target, bytes data);\\n\\n    error DiamondWritable__InvalidInitializationParameters();\\n    error DiamondWritable__RemoveTargetNotZeroAddress();\\n    error DiamondWritable__ReplaceTargetIsIdentical();\\n    error DiamondWritable__SelectorAlreadyAdded();\\n    error DiamondWritable__SelectorIsImmutable();\\n    error DiamondWritable__SelectorNotFound();\\n    error DiamondWritable__SelectorNotSpecified();\\n    error DiamondWritable__TargetHasNoCode();\\n\\n    struct FacetCut {\\n        address target;\\n        FacetCutAction action;\\n        bytes4[] selectors;\\n    }\\n}\\n\",\"keccak256\":\"0x82e0eeb28c8b8bd1ee9c5dd3247fa3d4062d5c6d43061833714c88741ecb5605\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/diamond-resolver/DiamondResolver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.17 <0.9.0;\\r\\n\\r\\nimport \\\"./SolidStateDiamond.sol\\\";\\r\\nimport \\\"../registry/ENS.sol\\\";\\r\\nimport \\\"./Multicallable.sol\\\";\\r\\nimport \\\"./IDiamondResolver.sol\\\";\\r\\nimport \\\"./facets/base/IDiamondResolverBase.sol\\\";\\r\\nimport \\\"./facets/base/DiamondResolverBase.sol\\\";\\r\\nimport {ReverseClaimer} from \\\"../reverseRegistrar/ReverseClaimer.sol\\\";\\r\\nimport {INameWrapper} from \\\"../wrapper/INameWrapper.sol\\\";\\r\\n\\r\\nbytes4 constant supportsInterfaceSignature = 0x01ffc9a7;\\r\\n\\r\\ncontract DiamondResolver is SolidStateDiamond, Multicallable, ReverseClaimer, DiamondResolverBase {\\r\\n\\r\\n    constructor(ENS _ens, INameWrapper _nameWrapper) ReverseClaimer(_ens, msg.sender) {\\r\\n        _setEns(_ens);\\r\\n        _setNameWrapper(_nameWrapper);\\r\\n\\r\\n        bytes4[] memory selectors = new bytes4[](8);\\r\\n        uint256 selectorIndex;\\r\\n\\r\\n        // register DiamondResolverBase\\r\\n\\r\\n        selectors[selectorIndex++] = IDiamondResolverBase.setNameWrapper.selector;\\r\\n        selectors[selectorIndex++] = IDiamondResolverBase.setWhitelisted.selector;\\r\\n        selectors[selectorIndex++] = IDiamondResolverBase.setApprovalForAll.selector;\\r\\n        selectors[selectorIndex++] = IDiamondResolverBase.isApprovedForAll.selector;\\r\\n        selectors[selectorIndex++] = IDiamondResolverBase.approve.selector;\\r\\n        selectors[selectorIndex++] = IDiamondResolverBase.isApprovedFor.selector;\\r\\n        selectors[selectorIndex++] = IVersionableResolver.recordVersions.selector;\\r\\n        selectors[selectorIndex++] = IVersionableResolver.clearRecords.selector;\\r\\n\\r\\n        // diamond cut\\r\\n\\r\\n        FacetCut[] memory facetCuts = new FacetCut[](1);\\r\\n\\r\\n        facetCuts[0] = FacetCut({\\r\\n            target: address(this),\\r\\n            action: FacetCutAction.ADD,\\r\\n            selectors: selectors\\r\\n        });\\r\\n\\r\\n        _diamondCut(facetCuts, address(0), '');\\r\\n\\r\\n        _setSupportsInterface(type(IDiamondResolver).interfaceId, true);\\r\\n        _setSupportsInterface(type(IVersionableResolver).interfaceId, true);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceID\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(Multicallable, SolidStateDiamond)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _supportsInterface(interfaceID) || super.supportsInterface(interfaceID);\\r\\n    }\\r\\n\\r\\n    function supportsInterfaceUnoptimized(\\r\\n        bytes4 interfaceID\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (bool result)\\r\\n    {\\r\\n        result = super.supportsInterface(interfaceID);\\r\\n\\r\\n        // Get facets and check for support interface\\r\\n        address[] memory addresses = DiamondResolver(payable(address(this)))\\r\\n            .facetAddresses();\\r\\n        uint256 addressesLength = addresses.length;\\r\\n        for (uint256 i; i < addressesLength; ) {\\r\\n            if (addresses[i] == address(this)) continue;\\r\\n\\r\\n            (bool success, bytes memory data) = addresses[i].staticcall(\\r\\n                abi.encodeWithSelector(supportsInterfaceSignature, interfaceID)\\r\\n            );\\r\\n\\r\\n            if (success) {\\r\\n                result = result || abi.decode(data, (bool));\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5e76ee996564dc304ddeca69fe6b5a7dc2ce3e53a43fdf39f48faec04612534f\",\"license\":\"MIT\"},\"contracts/diamond-resolver/IDiamondResolver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.17 <0.9.0;\\r\\n\\r\\nimport \\\"@solidstate/contracts/proxy/diamond/ISolidStateDiamond.sol\\\";\\r\\nimport \\\"./IMulticallable.sol\\\";\\r\\nimport \\\"../registry/ENS.sol\\\";\\r\\n\\r\\ninterface IDiamondResolver is ISolidStateDiamond, IMulticallable {\\r\\n  function ens() external view returns(ENS);\\r\\n}\",\"keccak256\":\"0x9187077a892c715413b466c255900ef7d40792e8c81b6f70cb0a508258b0f41d\",\"license\":\"MIT\"},\"contracts/diamond-resolver/IMulticallable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IMulticallable {\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n\\n    function multicallWithNodeCheck(\\n        bytes32,\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x0334202e20bb11995997083d05963f5e8e7ed6194cba494e7f9371ab7bf4e2c3\",\"license\":\"MIT\"},\"contracts/diamond-resolver/Multicallable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IMulticallable.sol\\\";\\nimport \\\"@solidstate/contracts/interfaces/IERC165.sol\\\";\\n\\nabstract contract Multicallable is IMulticallable, IERC165 {\\n    function _multicall(\\n        bytes32 nodehash,\\n        bytes[] calldata data\\n    ) internal returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            if (nodehash != bytes32(0)) {\\n                bytes32 txNamehash = bytes32(data[i][4:36]);\\n                require(\\n                    txNamehash == nodehash,\\n                    \\\"multicall: All records must have a matching namehash\\\"\\n                );\\n            }\\n            (bool success, bytes memory result) = address(this).delegatecall(\\n                data[i]\\n            );\\n            require(success);\\n            results[i] = result;\\n        }\\n        return results;\\n    }\\n\\n    // This function provides an extra security check when called\\n    // from priviledged contracts (such as EthRegistrarController)\\n    // that can set records on behalf of the node owners\\n    function multicallWithNodeCheck(\\n        bytes32 nodehash,\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results) {\\n        return _multicall(nodehash, data);\\n    }\\n\\n    function multicall(\\n        bytes[] calldata data\\n    ) public override returns (bytes[] memory results) {\\n        return _multicall(bytes32(0), data);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override(IERC165) returns (bool) {\\n        return interfaceID == type(IMulticallable).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xce4e0186743662da905da066b07af1d96e701208d10db909271e0d4d1b5fe5b4\",\"license\":\"MIT\"},\"contracts/diamond-resolver/SolidStateDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport { IOwnable, Ownable, OwnableInternal } from '@solidstate/contracts/access/ownable/Ownable.sol';\\r\\nimport { ISafeOwnable, SafeOwnable } from '@solidstate/contracts/access/ownable/SafeOwnable.sol';\\r\\nimport { IERC173 } from '@solidstate/contracts/interfaces/IERC173.sol';\\r\\nimport { DiamondBase } from '@solidstate/contracts/proxy/diamond/base/DiamondBase.sol';\\r\\nimport { DiamondFallback, IDiamondFallback } from '@solidstate/contracts/proxy/diamond/fallback/DiamondFallback.sol';\\r\\nimport { DiamondReadable, IDiamondReadable } from '@solidstate/contracts/proxy/diamond/readable/DiamondReadable.sol';\\r\\nimport { DiamondWritable, IDiamondWritable } from '@solidstate/contracts/proxy/diamond/writable/DiamondWritable.sol';\\r\\nimport { ISolidStateDiamond, IERC165 } from '@solidstate/contracts/proxy/diamond/ISolidStateDiamond.sol';\\r\\nimport { ERC165BaseInternal } from \\\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SolidState \\\"Diamond\\\" proxy reference implementation\\r\\n * Overrided to fix non-virtual function in ERC165Base implementation\\r\\n */\\r\\nabstract contract SolidStateDiamond is\\r\\n    ISolidStateDiamond,\\r\\n    DiamondBase,\\r\\n    DiamondFallback,\\r\\n    DiamondReadable,\\r\\n    DiamondWritable,\\r\\n    SafeOwnable,\\r\\n    ERC165BaseInternal\\r\\n{\\r\\n    constructor() {\\r\\n        bytes4[] memory selectors = new bytes4[](12);\\r\\n        uint256 selectorIndex;\\r\\n\\r\\n        // register DiamondFallback\\r\\n\\r\\n        selectors[selectorIndex++] = IDiamondFallback\\r\\n            .getFallbackAddress\\r\\n            .selector;\\r\\n        selectors[selectorIndex++] = IDiamondFallback\\r\\n            .setFallbackAddress\\r\\n            .selector;\\r\\n\\r\\n        _setSupportsInterface(type(IDiamondFallback).interfaceId, true);\\r\\n\\r\\n        // register DiamondWritable\\r\\n\\r\\n        selectors[selectorIndex++] = IDiamondWritable.diamondCut.selector;\\r\\n\\r\\n        _setSupportsInterface(type(IDiamondWritable).interfaceId, true);\\r\\n\\r\\n        // register DiamondReadable\\r\\n\\r\\n        selectors[selectorIndex++] = IDiamondReadable.facets.selector;\\r\\n        selectors[selectorIndex++] = IDiamondReadable\\r\\n            .facetFunctionSelectors\\r\\n            .selector;\\r\\n        selectors[selectorIndex++] = IDiamondReadable.facetAddresses.selector;\\r\\n        selectors[selectorIndex++] = IDiamondReadable.facetAddress.selector;\\r\\n\\r\\n        _setSupportsInterface(type(IDiamondReadable).interfaceId, true);\\r\\n\\r\\n        // register ERC165\\r\\n\\r\\n        selectors[selectorIndex++] = IERC165.supportsInterface.selector;\\r\\n\\r\\n        _setSupportsInterface(type(IERC165).interfaceId, true);\\r\\n\\r\\n        // register SafeOwnable\\r\\n\\r\\n        selectors[selectorIndex++] = Ownable.owner.selector;\\r\\n        selectors[selectorIndex++] = SafeOwnable.nomineeOwner.selector;\\r\\n        selectors[selectorIndex++] = Ownable.transferOwnership.selector;\\r\\n        selectors[selectorIndex++] = SafeOwnable.acceptOwnership.selector;\\r\\n\\r\\n        _setSupportsInterface(type(IERC173).interfaceId, true);\\r\\n\\r\\n        // diamond cut\\r\\n\\r\\n        FacetCut[] memory facetCuts = new FacetCut[](1);\\r\\n\\r\\n        facetCuts[0] = FacetCut({\\r\\n            target: address(this),\\r\\n            action: FacetCutAction.ADD,\\r\\n            selectors: selectors\\r\\n        });\\r\\n\\r\\n        _diamondCut(facetCuts, address(0), '');\\r\\n\\r\\n        // set owner\\r\\n\\r\\n        _setOwner(msg.sender);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function _transferOwnership(\\r\\n        address account\\r\\n    ) internal virtual override(OwnableInternal, SafeOwnable) {\\r\\n        super._transferOwnership(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @inheritdoc DiamondFallback\\r\\n     */\\r\\n    function _getImplementation()\\r\\n        internal\\r\\n        view\\r\\n        override(DiamondBase, DiamondFallback)\\r\\n        returns (address implementation)\\r\\n    {\\r\\n        implementation = super._getImplementation();\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceID\\r\\n    ) public view virtual override(IERC165) returns (bool) {\\r\\n        return\\r\\n            interfaceID == type(IDiamondFallback).interfaceId ||\\r\\n            interfaceID == type(IDiamondWritable).interfaceId ||\\r\\n            interfaceID == type(IDiamondReadable).interfaceId ||\\r\\n            interfaceID == type(IERC165).interfaceId ||\\r\\n            interfaceID == type(IERC173).interfaceId;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x844f259aa8a115b3fe2d8ebbf28913abb21505f8cbe16d523e469e1fc68a68fa\",\"license\":\"MIT\"},\"contracts/diamond-resolver/facets/base/DiamondResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport {ERC165BaseInternal} from \\\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol\\\";\\r\\nimport \\\"./DiamondResolverBaseInternal.sol\\\";\\r\\nimport \\\"./IDiamondResolverBase.sol\\\";\\r\\n\\r\\nabstract contract DiamondResolverBase is\\r\\n    IDiamondResolverBase,\\r\\n    DiamondResolverBaseInternal,\\r\\n    ERC165BaseInternal\\r\\n{\\r\\n    function setNameWrapper(INameWrapper nameWrapper) external baseOnlyOwner {\\r\\n        _setNameWrapper(nameWrapper);\\r\\n    }\\r\\n\\r\\n    function setWhitelisted(\\r\\n        address operator,\\r\\n        bool approved\\r\\n    ) external baseOnlyOwner {\\r\\n        _setWhitelisted(operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public {\\r\\n        _setApprovalForAll(operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(\\r\\n        address account,\\r\\n        address operator\\r\\n    ) public view returns (bool) {\\r\\n        return _isApprovedForAll(account, operator);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve a delegate to be able to updated records on a node.\\r\\n     */\\r\\n    function approve(bytes32 node, address delegate, bool approved) public {\\r\\n        _approve(node, delegate, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check to see if the delegate has been approved by the owner for the node.\\r\\n     */\\r\\n    function isApprovedFor(\\r\\n        address owner,\\r\\n        bytes32 node,\\r\\n        address delegate\\r\\n    ) public view returns (bool) {\\r\\n        return _isApprovedFor(owner, node, delegate);\\r\\n    }\\r\\n\\r\\n    function recordVersions(bytes32 node) public view returns (uint64) {\\r\\n        return _recordVersions(node);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Increments the record version associated with an ENS node.\\r\\n     * May only be called by the owner of that node in the ENS registry.\\r\\n     * @param node The node to update.\\r\\n     */\\r\\n    function clearRecords(bytes32 node) public virtual authorised(node) {\\r\\n        _clearRecords(node);\\r\\n    }\\r\\n\\r\\n    function setSupportsInterface(bytes4 interfaceId, bool status) public baseOnlyOwner {\\r\\n        _setSupportsInterface(interfaceId, status);\\r\\n    }\\r\\n\\r\\n    function setMultiSupportsInterface(bytes4[] memory interfaceId, bool status) public baseOnlyOwner {\\r\\n        unchecked {\\r\\n            uint length = interfaceId.length;\\r\\n            for (uint i; i < length; ++i) {\\r\\n                _setSupportsInterface(interfaceId[i], status);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0807e522156dd5eef84428923e37e24cd32d42a738e85cde7103582d75249357\",\"license\":\"MIT\"},\"contracts/diamond-resolver/facets/base/DiamondResolverBaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport {OwnableStorage} from \\\"@solidstate/contracts/access/ownable/OwnableStorage.sol\\\";\\r\\nimport \\\"./DiamondResolverBaseStorage.sol\\\";\\r\\nimport \\\"./DiamondResolverUtil.sol\\\";\\r\\n\\r\\nerror Ownable__NotOwner();\\r\\nerror ERC165Base__InvalidInterfaceId();\\r\\n\\r\\nabstract contract DiamondResolverBaseInternal is DiamondResolverUtil {\\r\\n    // This is done to prevent conflict\\r\\n    modifier baseOnlyOwner() {\\r\\n        if (msg.sender != OwnableStorage.layout().owner) revert Ownable__NotOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Logged when an operator is added or removed.\\r\\n    event ApprovalForAll(\\r\\n        address indexed owner,\\r\\n        address indexed operator,\\r\\n        bool approved\\r\\n    );\\r\\n\\r\\n    // Logged when a delegate is approved or an approval is revoked.\\r\\n    event Approved(\\r\\n        address owner,\\r\\n        bytes32 indexed node,\\r\\n        address indexed delegate,\\r\\n        bool indexed approved\\r\\n    );\\r\\n\\r\\n    event SetNameWrapper(address indexed nameWrapper);\\r\\n\\r\\n    event SetWhitelisted(address indexed operator, bool approved);\\r\\n\\r\\n    function _setEns(ENS ens) internal {\\r\\n        DiamondResolverBaseStorage.Layout storage l = DiamondResolverBaseStorage\\r\\n            .layout();\\r\\n        l.ens = ens;\\r\\n    }\\r\\n\\r\\n    function _setNameWrapper(INameWrapper nameWrapper) internal {\\r\\n        DiamondResolverBaseStorage.Layout storage l = DiamondResolverBaseStorage\\r\\n            .layout();\\r\\n        l.nameWrapper = nameWrapper;\\r\\n        emit SetNameWrapper(address(nameWrapper));\\r\\n    }\\r\\n\\r\\n    function _setWhitelisted(address operator, bool approved) internal {\\r\\n        DiamondResolverBaseStorage.Layout storage l = DiamondResolverBaseStorage\\r\\n            .layout();\\r\\n        l.whitelisted[operator] = approved;\\r\\n        emit SetWhitelisted(operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155-setApprovalForAll}.\\r\\n     */\\r\\n    function _setApprovalForAll(address operator, bool approved) internal {\\r\\n        require(\\r\\n            msg.sender != operator,\\r\\n            \\\"ERC1155: setting approval status for self\\\"\\r\\n        );\\r\\n\\r\\n        DiamondResolverBaseStorage.Layout storage l = DiamondResolverBaseStorage\\r\\n            .layout();\\r\\n        l.operatorApprovals[msg.sender][operator] = approved;\\r\\n        emit ApprovalForAll(msg.sender, operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve a delegate to be able to updated records on a node.\\r\\n     */\\r\\n    function _approve(bytes32 node, address delegate, bool approved) internal {\\r\\n        require(msg.sender != delegate, \\\"Setting delegate status for self\\\");\\r\\n\\r\\n        DiamondResolverBaseStorage.Layout storage l = DiamondResolverBaseStorage\\r\\n            .layout();\\r\\n        l.tokenApprovals[msg.sender][node][delegate] = approved;\\r\\n        emit Approved(msg.sender, node, delegate, approved);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x67c415ce1c5f34ec0352fb6d0008f9c4be0a965eb411d4ff585c614cd49fdc47\",\"license\":\"MIT\"},\"contracts/diamond-resolver/facets/base/DiamondResolverBaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"../../../registry/ENS.sol\\\";\\r\\nimport {INameWrapper} from \\\"../../../wrapper/INameWrapper.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev derived from PublicResolver (MIT license)\\r\\n */\\r\\nlibrary DiamondResolverBaseStorage {\\r\\n    struct Layout {\\r\\n        ENS ens;\\r\\n        INameWrapper nameWrapper;\\r\\n\\r\\n        /**\\r\\n         * trustedETHController and trustedReverseRegistrar has right to control any name regardless of approval\\r\\n         * controller address => whitelisted\\r\\n         */\\r\\n        mapping(address => bool) whitelisted;\\r\\n\\r\\n        /**\\r\\n         * A mapping of operators. An address that is authorised for an address\\r\\n         * may make any changes to the name that the owner could, but may not update\\r\\n         * the set of authorisations.\\r\\n         * (owner, operator) => approved\\r\\n         */\\r\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\r\\n\\r\\n        /**\\r\\n         * A mapping of delegates. A delegate that is authorised by an owner\\r\\n         * for a name may make changes to the name's resolver, but may not update\\r\\n         * the set of token approvals.\\r\\n         * (owner, name, delegate) => approved\\r\\n         */\\r\\n        mapping(address => mapping(bytes32 => mapping(address => bool))) tokenApprovals;\\r\\n\\r\\n        mapping(bytes32 => uint64) recordVersions;\\r\\n\\r\\n        mapping(address => bool) supportsInterface;\\r\\n    }\\r\\n\\r\\n    bytes32 internal constant STORAGE_SLOT =\\r\\n        keccak256('optidomains.contracts.storage.DiamondResolverStorage');\\r\\n\\r\\n    function layout() internal pure returns (Layout storage l) {\\r\\n        bytes32 slot = STORAGE_SLOT;\\r\\n        assembly {\\r\\n            l.slot := slot\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcda270f598406f432c04c1c5f0de4f6f284f43d86ef9c3f78a88fd0293854219\",\"license\":\"MIT\"},\"contracts/diamond-resolver/facets/base/DiamondResolverUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"./DiamondResolverBaseStorage.sol\\\";\\r\\nimport \\\"./IVersionableResolver.sol\\\";\\r\\n\\r\\nabstract contract DiamondResolverUtil {\\r\\n    event VersionChanged(bytes32 indexed node, uint64 newVersion);\\r\\n\\r\\n    function _recordVersions(bytes32 node) internal view returns (uint64) {\\r\\n        DiamondResolverBaseStorage.Layout storage l = DiamondResolverBaseStorage\\r\\n            .layout();\\r\\n        return l.recordVersions[node];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Increments the record version associated with an ENS node.\\r\\n     * May only be called by the owner of that node in the ENS registry.\\r\\n     * @param node The node to update.\\r\\n     */\\r\\n    function _clearRecords(bytes32 node) internal virtual {\\r\\n        DiamondResolverBaseStorage.Layout storage l = DiamondResolverBaseStorage\\r\\n            .layout();\\r\\n        l.recordVersions[node]++;\\r\\n        emit VersionChanged(node, l.recordVersions[node]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155-isApprovedForAll}.\\r\\n     */\\r\\n    function _isApprovedForAll(\\r\\n        address account,\\r\\n        address operator\\r\\n    ) internal view returns (bool) {\\r\\n        DiamondResolverBaseStorage.Layout storage l = DiamondResolverBaseStorage\\r\\n            .layout();\\r\\n        return l.operatorApprovals[account][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check to see if the delegate has been approved by the owner for the node.\\r\\n     */\\r\\n    function _isApprovedFor(\\r\\n        address owner,\\r\\n        bytes32 node,\\r\\n        address delegate\\r\\n    ) internal view returns (bool) {\\r\\n        DiamondResolverBaseStorage.Layout storage l = DiamondResolverBaseStorage\\r\\n            .layout();\\r\\n        return l.tokenApprovals[owner][node][delegate];\\r\\n    }\\r\\n\\r\\n    function _isAuthorised(bytes32 node) internal view returns (bool) {\\r\\n        DiamondResolverBaseStorage.Layout storage l = DiamondResolverBaseStorage\\r\\n            .layout();\\r\\n        address owner = l.ens.owner(node);\\r\\n        if (owner == address(l.nameWrapper)) {\\r\\n            owner = l.nameWrapper.ownerOf(uint256(node));\\r\\n        }\\r\\n\\r\\n        return\\r\\n            owner == msg.sender ||\\r\\n            _isApprovedForAll(owner, msg.sender) ||\\r\\n            _isApprovedFor(owner, node, msg.sender);\\r\\n    }\\r\\n\\r\\n    function _isAuthorisedOrWhitelisted(\\r\\n        bytes32 node\\r\\n    ) internal view returns (bool) {\\r\\n        DiamondResolverBaseStorage.Layout storage l = DiamondResolverBaseStorage\\r\\n            .layout();\\r\\n        return _isAuthorised(node) || l.whitelisted[msg.sender];\\r\\n    }\\r\\n\\r\\n    modifier authorised(bytes32 node) {\\r\\n        require(_isAuthorised(node));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier whitelisted(bytes32 node) {\\r\\n        require(_isAuthorisedOrWhitelisted(node));\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0cba4bb47c481237bd868f68981d868cb1538ea71488df51d5e0f600123482a7\",\"license\":\"MIT\"},\"contracts/diamond-resolver/facets/base/IDiamondResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"./IVersionableResolver.sol\\\";\\r\\nimport {INameWrapper} from \\\"../../../wrapper/INameWrapper.sol\\\";\\r\\n\\r\\ninterface IDiamondResolverBase is IVersionableResolver {\\r\\n    function setNameWrapper(INameWrapper nameWrapper) external;\\r\\n\\r\\n    function setWhitelisted(address operator, bool approved) external;\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    function isApprovedForAll(\\r\\n        address account,\\r\\n        address operator\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function approve(bytes32 node, address delegate, bool approved) external;\\r\\n\\r\\n    function isApprovedFor(\\r\\n        address owner,\\r\\n        bytes32 node,\\r\\n        address delegate\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x928f681bff531c3ebd73955bb4a3d01f71d38ea84581a6dfb99cdf9231ca99c5\",\"license\":\"MIT\"},\"contracts/diamond-resolver/facets/base/IVersionableResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IVersionableResolver {\\n    // event VersionChanged(bytes32 indexed node, uint64 newVersion);\\n\\n    function recordVersions(bytes32 node) external view returns (uint64);\\n    function clearRecords(bytes32 node) external;\\n}\\n\",\"keccak256\":\"0x63f6cd99d140ff213d2635b64708cbd3b49395bd6da66e68c3de37ba3c512b4b\",\"license\":\"MIT\"},\"contracts/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBaseRegistrar is IERC721 {\\n    event ControllerAdded(address indexed controller);\\n    event ControllerRemoved(address indexed controller);\\n    event NameMigrated(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRegistered(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external;\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external;\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external;\\n\\n    // Returns the expiration timestamp of the specified label hash.\\n    function nameExpires(uint256 id) external view returns (uint256);\\n\\n    // Returns true iff the specified name is available for registration.\\n    function available(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Register a name.\\n     */\\n    function register(\\n        uint256 id,\\n        address owner,\\n        uint256 duration\\n    ) external returns (uint256);\\n\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x9ac51351ff72d73083aed62b7cdad4c07e9d1eb68401d7fd8457bdd828f2c6fe\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"contracts/reverseRegistrar/IReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IReverseRegistrar {\\n    function setDefaultResolver(address resolver) external;\\n\\n    function claim(address owner) external returns (bytes32);\\n\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function claimWithResolver(\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function setName(string memory name) external returns (bytes32);\\n\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) external returns (bytes32);\\n\\n    function node(address addr) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x83adfcf6da72b1bcd1e3ac387afe5fc7fdf7f2ac28b7601544d2ca4b9d45d159\"},\"contracts/reverseRegistrar/ReverseClaimer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport {ENS} from \\\"../registry/ENS.sol\\\";\\nimport {IReverseRegistrar} from \\\"../reverseRegistrar/IReverseRegistrar.sol\\\";\\n\\ncontract ReverseClaimer {\\n    bytes32 constant ADDR_REVERSE_NODE =\\n        0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n    constructor(ENS ens, address claimant) {\\n        IReverseRegistrar reverseRegistrar = IReverseRegistrar(\\n            ens.owner(ADDR_REVERSE_NODE)\\n        );\\n        reverseRegistrar.claim(claimant);\\n    }\\n}\\n\",\"keccak256\":\"0x78a28627241535b595f6fff476a1fa7acc90c80684fe7784734920fc8af6fc22\",\"license\":\"MIT\"},\"contracts/wrapper/IMetadataService.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface IMetadataService {\\n    function uri(uint256) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb3f1cf6df01ed7b15e5f2318f6823afbdb586ca38c2124c67955c645647ae9a2\",\"license\":\"MIT\"},\"contracts/wrapper/INameWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"../ethregistrar/IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IMetadataService.sol\\\";\\nimport \\\"./INameWrapperUpgrade.sol\\\";\\n\\nuint32 constant CANNOT_UNWRAP = 1;\\nuint32 constant CANNOT_BURN_FUSES = 2;\\nuint32 constant CANNOT_TRANSFER = 4;\\nuint32 constant CANNOT_SET_RESOLVER = 8;\\nuint32 constant CANNOT_SET_TTL = 16;\\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\\nuint32 constant CANNOT_APPROVE = 64;\\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\\nuint32 constant IS_DOT_ETH = 1 << 17;\\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\\nuint32 constant CAN_DO_EVERYTHING = 0;\\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\\n// all fuses apart from IS_DOT_ETH\\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\\n\\ninterface INameWrapper is IERC1155 {\\n    event NameWrapped(\\n        bytes32 indexed node,\\n        bytes name,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    );\\n\\n    event NameUnwrapped(bytes32 indexed node, address owner);\\n\\n    event FusesSet(bytes32 indexed node, uint32 fuses);\\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\\n\\n    function ens() external view returns (ENS);\\n\\n    function registrar() external view returns (IBaseRegistrar);\\n\\n    function metadataService() external view returns (IMetadataService);\\n\\n    function names(bytes32) external view returns (bytes memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function upgradeContract() external view returns (INameWrapperUpgrade);\\n\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n\\n    function wrap(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        address resolver\\n    ) external;\\n\\n    function wrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint16 ownerControlledFuses,\\n        address resolver\\n    ) external returns (uint64 expires);\\n\\n    function registerAndWrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint256 duration,\\n        address resolver,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint256 registrarExpiry);\\n\\n    function renew(\\n        uint256 labelHash,\\n        uint256 duration\\n    ) external returns (uint256 expires);\\n\\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\\n\\n    function unwrapETH2LD(\\n        bytes32 label,\\n        address newRegistrant,\\n        address newController\\n    ) external;\\n\\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\\n\\n    function setFuses(\\n        bytes32 node,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint32 newFuses);\\n\\n    function setChildFuses(\\n        bytes32 parentNode,\\n        bytes32 labelhash,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        string calldata label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        string calldata label,\\n        address newOwner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function extendExpiry(\\n        bytes32 node,\\n        bytes32 labelhash,\\n        uint64 expiry\\n    ) external returns (uint64);\\n\\n    function canModifyName(\\n        bytes32 node,\\n        address addr\\n    ) external view returns (bool);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function ownerOf(uint256 id) external view returns (address owner);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function getData(\\n        uint256 id\\n    ) external view returns (address, uint32, uint64);\\n\\n    function setMetadataService(IMetadataService _metadataService) external;\\n\\n    function uri(uint256 tokenId) external view returns (string memory);\\n\\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\\n\\n    function allFusesBurned(\\n        bytes32 node,\\n        uint32 fuseMask\\n    ) external view returns (bool);\\n\\n    function isWrapped(bytes32) external view returns (bool);\\n\\n    function isWrapped(bytes32, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x70310eb67146d7290731c31841399640ac3b6a949eadc6598bc150123d185c57\",\"license\":\"MIT\"},\"contracts/wrapper/INameWrapperUpgrade.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface INameWrapperUpgrade {\\n    function wrapFromUpgrade(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        uint32 fuses,\\n        uint64 expiry,\\n        address approved,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x42e0cec6cd9d1a62d51d45b678f69d3e4ad5555e659b197e41257b308346bb8a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200488d3803806200488d8339810160408190526200003491620012e3565b60408051600c8082526101a082019092528391339160009160208201610180803683370190505090506000632c40805960e01b8282620000748162001322565b9350815181106200008957620000896200134a565b6001600160e01b031990921660209283029190910190910152639142376560e01b8282620000b78162001322565b935081518110620000cc57620000cc6200134a565b6001600160e01b031990921660209283029190910190910152620000f9632f40adcf60e21b6001620008df565b6307e4c70760e21b82826200010e8162001322565b9350815181106200012357620001236200134a565b6001600160e01b031990921660209283029190910190910152620001506307e4c70760e21b6001620008df565b637a0ed62760e01b8282620001658162001322565b9350815181106200017a576200017a6200134a565b6001600160e01b0319909216602092830291909101909101526356fe50af60e11b8282620001a88162001322565b935081518110620001bd57620001bd6200134a565b6001600160e01b0319909216602092830291909101909101526314bbdacb60e21b8282620001eb8162001322565b9350815181106200020057620002006200134a565b6001600160e01b0319909216602092830291909101909101526366ffd66360e11b82826200022e8162001322565b9350815181106200024357620002436200134a565b6001600160e01b031990921660209283029190910190910152620002706348e2b09360e01b6001620008df565b6301ffc9a760e01b8282620002858162001322565b9350815181106200029a576200029a6200134a565b6001600160e01b031990921660209283029190910190910152620002c76301ffc9a760e01b6001620008df565b638da5cb5b60e01b8282620002dc8162001322565b935081518110620002f157620002f16200134a565b6001600160e01b03199092166020928302919091019091015263455a8a8560e11b82826200031f8162001322565b9350815181106200033457620003346200134a565b6001600160e01b03199092166020928302919091019091015263f2fde38b60e01b8282620003628162001322565b9350815181106200037757620003776200134a565b6001600160e01b0319909216602092830291909101909101526379ba509760e01b8282620003a58162001322565b935081518110620003ba57620003ba6200134a565b6001600160e01b031990921660209283029190910190910152620003e76307f5828d60e41b6001620008df565b604080516001808252818301909252600091816020015b60408051606080820183526000808352602083015291810191909152815260200190600190039081620003fe579050506040805160608101909152308152909150602081016000815260200184815250816000815181106200046457620004646200134a565b602002602001018190525062000492816000604051806020016040528060008152506200095160201b60201c565b6200049d3362000b2d565b50506040516302571be360e01b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e26004820152600091506001600160a01b038416906302571be390602401602060405180830381865afa15801562000508573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200052e919062001376565b604051630f41a04d60e11b81526001600160a01b03848116600483015291925090821690631e83409a906024016020604051808303816000875af11580156200057b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005a191906200139d565b50505050620005b68262000ba160201b60201c565b620005c18162000bda565b60408051600880825261012082019092526000916020820161010080368337019050509050600063371412f160e01b8282620005fd8162001322565b9350815181106200061257620006126200134a565b6001600160e01b031990921660209283029190910190910152639281aa0b60e01b8282620006408162001322565b9350815181106200065557620006556200134a565b6001600160e01b03199092166020928302919091019091015263a22cb46560e01b8282620006838162001322565b9350815181106200069857620006986200134a565b6001600160e01b03199092166020928302919091019091015263e985e9c560e01b8282620006c68162001322565b935081518110620006db57620006db6200134a565b6001600160e01b03199092166020928302919091019091015263a4b91a0160e01b8282620007098162001322565b9350815181106200071e576200071e6200134a565b6001600160e01b0319909216602092830291909101909101526354bc259f60e11b82826200074c8162001322565b9350815181106200076157620007616200134a565b6001600160e01b03199092166020928302919091019091015263d700ff3360e01b82826200078f8162001322565b935081518110620007a457620007a46200134a565b6001600160e01b0319909216602092830291909101909101526306c07aeb60e31b8282620007d28162001322565b935081518110620007e757620007e76200134a565b6001600160e01b03199290921660209283029190910190910152604080516001808252818301909252600091816020015b6040805160608082018352600080835260208301529181019190915281526020019060019003908162000818579050506040805160608101909152308152909150602081016000815260200184815250816000815181106200087e576200087e6200134a565b6020026020010181905250620008ac816000604051806020016040528060008152506200095160201b60201c565b620008c0633f15457f60e01b6001620008df565b620008d463e103286b60e01b6001620008df565b505050505062001530565b6001600160e01b031980831690036200090b5760405163b0a19dd560e01b815260040160405180910390fd5b806200092162000c4260201b620014e81760201c565b6001600160e01b03199390931660009081526020939093526040909220805460ff19169215159290921790915550565b60006200096862000c6660201b6200150c1760201c565b600181015490915061ffff8116908190600090600716156200099c5750600381901c60009081526002840160205260409020545b60005b875181101562000a9b576000888281518110620009c057620009c06200134a565b60200260200101519050600081602001519050816040015151600003620009fa5760405163eb6c3aeb60e01b815260040160405180910390fd5b600081600281111562000a115762000a1162001360565b0362000a305762000a258786868562000c8a565b909550935062000a90565b600181600281111562000a475762000a4762001360565b0362000a5f5762000a59878362000de9565b62000a90565b600281600281111562000a765762000a7662001360565b0362000a905762000a8a8786868562000f4f565b90955093505b50506001016200099f565b5082821462000ab85760018401805461ffff191661ffff84161790555b600782161562000adb57600382901c600090815260028501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67387878760405162000b10939291906200140b565b60405180910390a162000b2486866200117b565b50505050505050565b600062000b446200127c60201b620015301760201c565b80546040519192506001600160a01b03808516929116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380546001600160a01b0319166001600160a01b0392909216919091179055565b600062000bb8620012a060201b620015541760201c565b80546001600160a01b0319166001600160a01b03939093169290921790915550565b600062000bf1620012a060201b620015541760201c565b6001810180546001600160a01b0319166001600160a01b038516908117909155604051919250907f2a3953a00c61e46ecb4a26a52aba9acbbf214c988422bb25322bf64fc5cc15fd90600090a25050565b7ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d890565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390565b805160009081906001600160a01b0316301480159062000cca575062000cc883600001516001600160a01b0316620012c460201b620005b41760201c565b155b1562000ce957604051633ddc5cab60e21b815260040160405180910390fd5b60005b83604001515181101562000ddc5760008460400151828151811062000d155762000d156200134a565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c1562000d6257604051634923a77160e11b815260040160405180910390fd5b85516001600160e01b0319838116600081815260208d90526040902060609390931b6001600160601b0319168b1790925560058a901b60e090811692831c91831c1999909916179781900362000dcc57600389901c600090815260028b0160205260408120989098555b5050506001958601950162000cec565b5093959294509192505050565b62000e0c81600001516001600160a01b0316620012c460201b620005b41760201c565b62000e2a57604051633ddc5cab60e21b815260040160405180910390fd5b60005b81604001515181101562000f4a5760008260400151828151811062000e565762000e566200134a565b6020908102919091018101516001600160e01b03198116600090815291869052604090912054909150606081901c8062000ea3576040516337e25a9760e11b815260040160405180910390fd5b306001600160a01b0382160362000ecd5760405163e983573160e01b815260040160405180910390fd5b84600001516001600160a01b0316816001600160a01b03160362000f04576040516330baabf360e11b815260040160405180910390fd5b5083516001600160e01b031992909216600090815260208690526040902060609290921b6001600160601b0319166001600160601b039190911617905560010162000e2d565b505050565b805160009081906001600160a01b03161562000f7e57604051633ab3490960e21b815260040160405180910390fd5b600385901c6007861660005b856040015151811015620011675760008660400151828151811062000fb35762000fb36200134a565b6020908102919091018101516001600160e01b031981166000908152918c9052604090912054909150606081901c62000fff576040516337e25a9760e11b815260040160405180910390fd5b30606082901c03620010245760405163e983573160e01b815260040160405180910390fd5b60008990036200105257600019909401600081815260028c016020526040902054985093600793506200105a565b600019909301925b600584901b89901b6000806001600160e01b031980841690861614620010ad576001600160e01b03198316600090815260208f90526040902080546001600160601b0319166001600160601b0386161790555b50506001600160e01b03198316600090815260208d90526040812055611fff600383901c1660e0600584901b168782146200111257600082815260028f016020526040902080546001600160e01b031980841c19909116908516831c17905562001136565b80836001600160e01b031916901c816001600160e01b031960001b901c198d16179b505b866000036200115557600088815260028f01602052604081208190559b505b50506001909301925062000f8a915050565b5060039190911b1796939550929350505050565b8051156001600160a01b0383161514620011a8576040516326df4ccd60e01b815260040160405180910390fd5b6001600160a01b0382161562001278576001600160a01b03821630146200120657620011e8826001600160a01b0316620012c460201b620005b41760201c565b6200120657604051633ddc5cab60e21b815260040160405180910390fd5b6000826001600160a01b03168260405162001222919062001512565b600060405180830381855af49150503d80600081146200125f576040519150601f19603f3d011682016040523d82523d6000602084013e62001264565b606091505b505090508062000f4a573d6000803e3d6000fd5b5050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b7f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbe90565b3b151590565b6001600160a01b0381168114620012e057600080fd5b50565b60008060408385031215620012f757600080fd5b82516200130481620012ca565b60208401519092506200131781620012ca565b809150509250929050565b6000600182016200134357634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6000602082840312156200138957600080fd5b81516200139681620012ca565b9392505050565b600060208284031215620013b057600080fd5b5051919050565b60005b83811015620013d4578181015183820152602001620013ba565b50506000910152565b60008151808452620013f7816020860160208601620013b7565b601f01601f19169290920160200192915050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b84811015620014e057898403607f19018652815180516001600160a01b031685528381015189860190600381106200147c57634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b80831015620014ca5783516001600160e01b03191682529286019260019290920191908601906200149e565b5097850197955050509082019060010162001434565b50506001600160a01b038a16908801528681036040880152620015048189620013dd565b9a9950505050505050505050565b6000825162001526818460208701620013b7565b9190910192915050565b61334d80620015406000396000f3fe60806040526004361061019a5760003560e01c806391423765116100e1578063adfca15e1161008a578063d700ff3311610064578063d700ff331461050c578063e32954eb14610545578063e985e9c514610565578063f2fde38b14610585576101a1565b8063adfca15e14610466578063bdc0c35514610493578063cdffacc6146104b3576101a1565b8063a4b91a01116100bb578063a4b91a01146103f9578063a9784b3e14610419578063ac9650d814610439576101a1565b806391423765146103995780639281aa0b146103b9578063a22cb465146103d9576101a1565b806354e7796f116101435780637a0ed6271161011d5780637a0ed6271461034d5780638ab5150a1461036f5780638da5cb5b14610384576101a1565b806354e7796f146102f8578063717dbd4c1461031857806379ba509714610338576101a1565b80633603d758116101745780633603d75814610296578063371412f1146102b657806352ef6b2c146102d6576101a1565b806301ffc9a7146102145780631f931c1c146102495780632c40805914610269576101a1565b366101a157005b60006101ab6105a5565b90506001600160a01b0381163b6101ee576040517f87c9fc3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3660008037600080366000845af43d6000803e80801561020d573d6000f35b3d6000fd5b005b34801561022057600080fd5b5061023461022f3660046128ff565b6105ba565b60405190151581526020015b60405180910390f35b34801561025557600080fd5b5061021261026436600461297b565b610630565b34801561027557600080fd5b5061027e6106ba565b6040516001600160a01b039091168152602001610240565b3480156102a257600080fd5b506102126102b1366004612a2a565b6106ed565b3480156102c257600080fd5b506102126102d1366004612a43565b61070d565b3480156102e257600080fd5b506102eb610763565b6040516102409190612a60565b34801561030457600080fd5b50610212610313366004612abb565b610939565b34801561032457600080fd5b50610212610333366004612bf8565b61098d565b34801561034457600080fd5b50610212610a15565b34801561035957600080fd5b50610362610a71565b6040516102409190612c84565b34801561037b57600080fd5b5061027e610f20565b34801561039057600080fd5b5061027e610f2a565b3480156103a557600080fd5b506102126103b4366004612a43565b610f34565b3480156103c557600080fd5b506102126103d4366004612d01565b610fb7565b3480156103e557600080fd5b506102126103f4366004612d01565b61100b565b34801561040557600080fd5b50610212610414366004612d1f565b611015565b34801561042557600080fd5b50610234610434366004612d61565b611025565b34801561044557600080fd5b50610459610454366004612d98565b611080565b6040516102409190612e2a565b34801561047257600080fd5b50610486610481366004612a43565b611095565b6040516102409190612e8c565b34801561049f57600080fd5b506102346104ae3660046128ff565b611214565b3480156104bf57600080fd5b5061027e6104ce3660046128ff565b6001600160e01b03191660009081527f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc93602052604090205460601c90565b34801561051857600080fd5b5061052c610527366004612a2a565b61140d565b60405167ffffffffffffffff9091168152602001610240565b34801561055157600080fd5b50610459610560366004612e9f565b61144a565b34801561057157600080fd5b50610234610580366004612eeb565b611457565b34801561059157600080fd5b506102126105a0366004612a43565b6114a6565b60006105af611578565b905090565b3b151590565b6001600160e01b0319811660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d8602052604081205460ff168061062a57507f4fbf0433000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6106386115eb565b6001600160a01b0316336001600160a01b03161461066957604051632f7a8ee160e01b815260040160405180910390fd5b6106b36106768587612f19565b8484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061161e92505050565b5050505050565b60006105af7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc96546001600160a01b031690565b806106f781611834565b61070057600080fd5b61070982611882565b5050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f671680460546001600160a01b0316331461075757604051632f7a8ee160e01b815260040160405180910390fd5b6107608161195a565b50565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94546060907f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff1667ffffffffffffffff8111156107c6576107c6612af2565b6040519080825280602002602001820160405280156107ef578160200160208202803683370190505b50915060008060005b600184015461ffff16821015610931576000818152600285016020526040812054905b600881101561091c578361082e81613002565b600188015490955061ffff168511905061091c57600581901b82901b6001600160e01b0319811660009081526020889052604081205460601c90805b888110156108bf578a81815181106108845761088461301c565b60200260200101516001600160a01b0316836001600160a01b0316036108ad57600191506108bf565b806108b781613002565b91505061086a565b5080156108ce5750505061090a565b818a89815181106108e1576108e161301c565b6001600160a01b03909216602092830291909101909101528761090381613002565b9850505050505b8061091481613002565b91505061081b565b5050808061092990613002565b9150506107f8565b505082525090565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f671680460546001600160a01b0316331461098357604051632f7a8ee160e01b815260040160405180910390fd5b61070982826119f4565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f671680460546001600160a01b031633146109d757604051632f7a8ee160e01b815260040160405180910390fd5b815160005b81811015610a0f57610a078482815181106109f9576109f961301c565b6020026020010151846119f4565b6001016109dc565b50505050565b610a1d611a83565b6001600160a01b0316336001600160a01b031614610a67576040517fefd1052d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a6f611aab565b565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94546060907f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff1667ffffffffffffffff811115610ad457610ad4612af2565b604051908082528060200260200182016040528015610b1a57816020015b604080518082019091526000815260606020820152815260200190600190039081610af25790505b50600182015490925060009061ffff1667ffffffffffffffff811115610b4257610b42612af2565b604051908082528060200260200182016040528015610b6b578160200160208202803683370190505b50905060008060005b600185015461ffff16821015610eae576000818152600286016020526040812054905b6008811015610e995783610baa81613002565b600189015490955061ffff1685119050610e9957600581901b82901b6001600160e01b0319811660009081526020899052604081205460601c90805b88811015610d2d57826001600160a01b03168c8281518110610c0a57610c0a61301c565b6020026020010151600001516001600160a01b031603610d1b57838c8281518110610c3757610c3761301c565b6020026020010151602001518b8381518110610c5557610c5561301c565b602002602001015160ff1681518110610c7057610c7061301c565b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505060ff8a8281518110610cd057610cd061301c565b602002602001015160ff1610610ce557600080fd5b898181518110610cf757610cf761301c565b602002602001018051809190610d0c90613032565b60ff1690525060019150610d2d565b80610d2581613002565b915050610be6565b508015610d3c57505050610e87565b818b8981518110610d4f57610d4f61301c565b60209081029190910101516001600160a01b03909116905260018a015461ffff1667ffffffffffffffff811115610d8857610d88612af2565b604051908082528060200260200182016040528015610db1578160200160208202803683370190505b508b8981518110610dc457610dc461301c565b602002602001015160200181905250828b8981518110610de657610de661301c565b602002602001015160200151600081518110610e0457610e0461301c565b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815250506001898981518110610e6457610e6461301c565b60ff9092166020928302919091019091015287610e8081613002565b9850505050505b80610e9181613002565b915050610b97565b50508080610ea690613002565b915050610b74565b5060005b82811015610f15576000848281518110610ece57610ece61301c565b602002602001015160ff1690506000878381518110610eef57610eef61301c565b602002602001015160200151905081815250508080610f0d90613002565b915050610eb2565b508185525050505090565b60006105af611a83565b60006105af6115eb565b610f3c6115eb565b6001600160a01b0316336001600160a01b031614610f6d57604051632f7a8ee160e01b815260040160405180910390fd5b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc96805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f671680460546001600160a01b0316331461100157604051632f7a8ee160e01b815260040160405180910390fd5b6107098282611af2565b6107098282611b94565b611020838383611cc2565b505050565b6001600160a01b0380841660009081527f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dc260209081526040808320868452825280832093851683529290529081205460ff165b949350505050565b606061108e60008484611db9565b9392505050565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94546060907f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff1667ffffffffffffffff8111156110f8576110f8612af2565b604051908082528060200260200182016040528015611121578160200160208202803683370190505b50915060008060005b600184015461ffff1682101561120a576000818152600285016020526040812054905b60088110156111f5578361116081613002565b600188015490955061ffff16851190506111f557600581901b82901b6001600160e01b0319811660009081526020889052604090205460601c6001600160a01b038a16036111e257808887815181106111bb576111bb61301c565b6001600160e01b031990921660209283029190910190910152856111de81613002565b9650505b50806111ed81613002565b91505061114d565b5050808061120290613002565b91505061112a565b5050825250919050565b60007f4fbf0433000000000000000000000000000000000000000000000000000000006001600160e01b031983161490506000306001600160a01b03166352ef6b2c6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611285573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112ad9190810190613051565b805190915060005b8181101561140557306001600160a01b03168382815181106112d9576112d961301c565b60200260200101516001600160a01b031603156112b5576000808483815181106113055761130561301c565b60200260200101516001600160a01b03166301ffc9a760e01b8860405160240161133f91906001600160e01b031991909116815260200190565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990941693909317909252905161139291906130eb565b600060405180830381855afa9150503d80600081146113cd576040519150601f19603f3d011682016040523d82523d6000602084013e6113d2565b606091505b509150915081156113fb5785806113f85750808060200190518101906113f89190613107565b95505b50506001016112b5565b505050919050565b60008181527f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dc3602052604081205467ffffffffffffffff1661062a565b6060611078848484611db9565b6001600160a01b0380831660009081527f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dc16020908152604080832093851683529290529081205460ff1661108e565b6114ae6115eb565b6001600160a01b0316336001600160a01b0316146114df57604051632f7a8ee160e01b815260040160405180910390fd5b61076081611f92565b7ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d890565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b7f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbe90565b600080356001600160e01b03191681527f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc93602052604090205460601c806115e857507f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc96546001600160a01b031690565b90565b60007f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605b546001600160a01b0316919050565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94547f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff81169081906000906007161561168d5750600381901c60009081526002840160205260409020545b60005b875181101561178b5760008882815181106116ad576116ad61301c565b602002602001015190506000816020015190508160400151516000036116ff576040517feb6c3aeb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081600281111561171357611713613124565b0361172e5761172487868685611fe0565b9095509350611781565b600181600281111561174257611742613124565b0361175657611751878361213d565b611781565b600281600281111561176a5761176a613124565b036117815761177b878686856122d3565b90955093505b5050600101611690565b508282146117c4576001840180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff84161790555b60078216156117e657600382901c600090815260028501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738787876040516118199392919061313a565b60405180910390a161182b868661255b565b50505050505050565b60007f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbe61186083612654565b8061108e575033600090815260028201602052604090205460ff169392505050565b60008181527f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dc36020526040812080547f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbe9267ffffffffffffffff90911691906118ea83613216565b82546101009290920a67ffffffffffffffff81810219909316918316021790915560008481526005840160209081526040918290205491519190921681528492507fc6621ccb8f3f5a04bb6502154b2caf6adf5983fe76dfef1cfc9c42e3579db444910160405180910390a25050565b7f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbf805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbe91907f2a3953a00c61e46ecb4a26a52aba9acbbf214c988422bb25322bf64fc5cc15fd90600090a25050565b6001600160e01b03198083169003611a38576040517fb0a19dd500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160e01b03199190911660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d860205260409020805460ff1916911515919091179055565b60007f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce661789061160f565b611ab43361285b565b7f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce6617890805473ffffffffffffffffffffffffffffffffffffffff19169055565b6001600160a01b03821660008181527f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dc06020908152604091829020805460ff191685151590811790915591519182527f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbe92917f26742d25b283cf51a0e3c4183d934871ed96d1bd33cf40706f87a94f29f686ac910160405180910390a2505050565b6001600160a01b0382163303611c175760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b3360008181527f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dc1602090815260408083206001600160a01b03871680855290835292819020805460ff1916861515908117909155815190815290517f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbe94927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31928290030190a3505050565b6001600160a01b0382163303611d1a5760405162461bcd60e51b815260206004820181905260248201527f53657474696e672064656c65676174652073746174757320666f722073656c666044820152606401611c0e565b60007f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbe336000818152600483016020908152604080832089845282528083206001600160a01b03891680855290835292819020805460ff19168815159081179091559051938452939450909187917ff0ddb3b04746704017f9aa8bd728fcc2c1d11675041205350018915f5e4750a0910160405180910390a450505050565b60608167ffffffffffffffff811115611dd457611dd4612af2565b604051908082528060200260200182016040528015611e0757816020015b6060815260200190600190039081611df25790505b50905060005b82811015611f8a578415611ed2576000848483818110611e2f57611e2f61301c565b9050602002810190611e41919061323d565b611e50916024916004916132a2565b611e59916132cc565b9050858114611ed05760405162461bcd60e51b815260206004820152603460248201527f6d756c746963616c6c3a20416c6c207265636f726473206d757374206861766560448201527f2061206d61746368696e67206e616d65686173680000000000000000000000006064820152608401611c0e565b505b60008030868685818110611ee857611ee861301c565b9050602002810190611efa919061323d565b604051611f089291906132ea565b600060405180830381855af49150503d8060008114611f43576040519150601f19603f3d011682016040523d82523d6000602084013e611f48565b606091505b509150915081611f5757600080fd5b80848481518110611f6a57611f6a61301c565b602002602001018190525050508080611f8290613002565b915050611e0d565b509392505050565b7f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce6617890805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556107608181565b805160009081906001600160a01b03163014801590612008575082516001600160a01b03163b155b1561202657604051633ddc5cab60e21b815260040160405180910390fd5b60005b8360400151518110156121305760008460400151828151811061204e5761204e61301c565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c156120b3576040517f92474ee200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85516001600160e01b0319838116600081815260208d90526040902060609390931b6bffffffffffffffffffffffff19168b1790925560058a901b60e090811692831c91831c1999909916179781900361212157600389901c600090815260028b0160205260408120989098555b50505060019586019501612029565b5093959294509192505050565b80516001600160a01b03163b61216657604051633ddc5cab60e21b815260040160405180910390fd5b60005b8160400151518110156110205760008260400151828151811061218e5761218e61301c565b6020908102919091018101516001600160e01b03198116600090815291869052604090912054909150606081901c806121f3576040517f6fc4b52e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b306001600160a01b03821603612235576040517fe983573100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84600001516001600160a01b0316816001600160a01b031603612284576040517f617557e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5083516001600160e01b031992909216600090815260208690526040902060609290921b6bffffffffffffffffffffffff19166bffffffffffffffffffffffff91909116179055600101612169565b805160009081906001600160a01b03161561231a576040517feacd242400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600385901c6007861660005b8560400151518110156125475760008660400151828151811061234b5761234b61301c565b6020908102919091018101516001600160e01b031981166000908152918c9052604090912054909150606081901c6123af576040517f6fc4b52e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b30606082901c036123ec576040517fe983573100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600089900361241857600019909401600081815260028c01602052604090205498509360079350612420565b600019909301925b600584901b89901b6000806001600160e01b03198084169086161461247c576001600160e01b03198316600090815260208f90526040902080546bffffffffffffffffffffffff19166bffffffffffffffffffffffff86161790555b50506001600160e01b03198316600090815260208d90526040812055611fff600383901c1660e0600584901b168782146124df57600082815260028f016020526040902080546001600160e01b031980841c19909116908516831c179055612518565b80837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c816001600160e01b031960001b901c198d16179b505b8660000361253657600088815260028f01602052604081208190559b505b505060019093019250612326915050565b5060039190911b1796939550929350505050565b8051156001600160a01b03831615146125a0576040517f26df4ccd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03821615610709576001600160a01b03821630146125e7576001600160a01b0382163b6125e757604051633ddc5cab60e21b815260040160405180910390fd5b6000826001600160a01b03168260405161260191906130eb565b600060405180830381855af49150503d806000811461263c576040519150601f19603f3d011682016040523d82523d6000602084013e612641565b606091505b5050905080611020573d6000803e3d6000fd5b6000807f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbe80546040517f02571be3000000000000000000000000000000000000000000000000000000008152600481018690529192506000916001600160a01b03909116906302571be390602401602060405180830381865afa1580156126df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270391906132fa565b60018301549091506001600160a01b03908116908216036127a95760018201546040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018690526001600160a01b0390911690636352211e90602401602060405180830381865afa158015612782573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a691906132fa565b90505b6001600160a01b03811633148061280257506001600160a01b03811660009081527f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dc16020908152604080832033845290915290205460ff165b8061107857506001600160a01b03811660009081527f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dc260209081526040808320878452825280832033845290915290205460ff16611078565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046080546040516001600160a01b038481169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b80356001600160e01b0319811681146128fa57600080fd5b919050565b60006020828403121561291157600080fd5b61108e826128e2565b60008083601f84011261292c57600080fd5b50813567ffffffffffffffff81111561294457600080fd5b6020830191508360208260051b850101111561295f57600080fd5b9250929050565b6001600160a01b038116811461076057600080fd5b60008060008060006060868803121561299357600080fd5b853567ffffffffffffffff808211156129ab57600080fd5b6129b789838a0161291a565b9097509550602088013591506129cc82612966565b909350604087013590808211156129e257600080fd5b818801915088601f8301126129f657600080fd5b813581811115612a0557600080fd5b896020828501011115612a1757600080fd5b9699959850939650602001949392505050565b600060208284031215612a3c57600080fd5b5035919050565b600060208284031215612a5557600080fd5b813561108e81612966565b6020808252825182820181905260009190848201906040850190845b81811015612aa15783516001600160a01b031683529284019291840191600101612a7c565b50909695505050505050565b801515811461076057600080fd5b60008060408385031215612ace57600080fd5b612ad7836128e2565b91506020830135612ae781612aad565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715612b2b57612b2b612af2565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612b5a57612b5a612af2565b604052919050565b600067ffffffffffffffff821115612b7c57612b7c612af2565b5060051b60200190565b600082601f830112612b9757600080fd5b81356020612bac612ba783612b62565b612b31565b82815260059290921b84018101918181019086841115612bcb57600080fd5b8286015b84811015612bed57612be0816128e2565b8352918301918301612bcf565b509695505050505050565b60008060408385031215612c0b57600080fd5b823567ffffffffffffffff811115612c2257600080fd5b612c2e85828601612b86565b9250506020830135612ae781612aad565b600081518084526020808501945080840160005b83811015612c795781516001600160e01b03191687529582019590820190600101612c53565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015612cf357888303603f19018552815180516001600160a01b03168452870151878401879052612ce087850182612c3f565b9588019593505090860190600101612cab565b509098975050505050505050565b60008060408385031215612d1457600080fd5b8235612ad781612966565b600080600060608486031215612d3457600080fd5b833592506020840135612d4681612966565b91506040840135612d5681612aad565b809150509250925092565b600080600060608486031215612d7657600080fd5b8335612d8181612966565b9250602084013591506040840135612d5681612966565b60008060208385031215612dab57600080fd5b823567ffffffffffffffff811115612dc257600080fd5b612dce8582860161291a565b90969095509350505050565b60005b83811015612df5578181015183820152602001612ddd565b50506000910152565b60008151808452612e16816020860160208601612dda565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612e7f57603f19888603018452612e6d858351612dfe565b94509285019290850190600101612e51565b5092979650505050505050565b60208152600061108e6020830184612c3f565b600080600060408486031215612eb457600080fd5b83359250602084013567ffffffffffffffff811115612ed257600080fd5b612ede8682870161291a565b9497909650939450505050565b60008060408385031215612efe57600080fd5b8235612f0981612966565b91506020830135612ae781612966565b6000612f27612ba784612b62565b80848252602080830192508560051b850136811115612f4557600080fd5b855b81811015612fe057803567ffffffffffffffff80821115612f685760008081fd5b818901915060608236031215612f7e5760008081fd5b612f86612b08565b8235612f9181612966565b81528286013560038110612fa55760008081fd5b8187015260408381013583811115612fbd5760008081fd5b612fc936828701612b86565b918301919091525087525050938201938201612f47565b50919695505050505050565b634e487b7160e01b600052601160045260246000fd5b6000600019820361301557613015612fec565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff810361304857613048612fec565b60010192915050565b6000602080838503121561306457600080fd5b825167ffffffffffffffff81111561307b57600080fd5b8301601f8101851361308c57600080fd5b805161309a612ba782612b62565b81815260059190911b820183019083810190878311156130b957600080fd5b928401925b828410156130e05783516130d181612966565b825292840192908401906130be565b979650505050505050565b600082516130fd818460208701612dda565b9190910192915050565b60006020828403121561311957600080fd5b815161108e81612aad565b634e487b7160e01b600052602160045260246000fd5b6000606080830181845280875180835260808601915060808160051b87010192506020808a016000805b848110156131f1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808a880301865282516001600160a01b03815116885284810151600381106131c257634e487b7160e01b84526021600452602484fd5b888601526040908101519088018990526131de89890182612c3f565b9750509483019491830191600101613164565b5050506001600160a01b03891690870152505083810360408501526130e08186612dfe565b600067ffffffffffffffff80831681810361323357613233612fec565b6001019392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261327257600080fd5b83018035915067ffffffffffffffff82111561328d57600080fd5b60200191503681900382131561295f57600080fd5b600080858511156132b257600080fd5b838611156132bf57600080fd5b5050820193919092039150565b8035602083101561062a57600019602084900360031b1b1692915050565b8183823760009101908152919050565b60006020828403121561330c57600080fd5b815161108e8161296656fea26469706673582212205991c4da683a90645735a55ef5c7bc831287518f1c35cd0271ecc95d03be566e64736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061019a5760003560e01c806391423765116100e1578063adfca15e1161008a578063d700ff3311610064578063d700ff331461050c578063e32954eb14610545578063e985e9c514610565578063f2fde38b14610585576101a1565b8063adfca15e14610466578063bdc0c35514610493578063cdffacc6146104b3576101a1565b8063a4b91a01116100bb578063a4b91a01146103f9578063a9784b3e14610419578063ac9650d814610439576101a1565b806391423765146103995780639281aa0b146103b9578063a22cb465146103d9576101a1565b806354e7796f116101435780637a0ed6271161011d5780637a0ed6271461034d5780638ab5150a1461036f5780638da5cb5b14610384576101a1565b806354e7796f146102f8578063717dbd4c1461031857806379ba509714610338576101a1565b80633603d758116101745780633603d75814610296578063371412f1146102b657806352ef6b2c146102d6576101a1565b806301ffc9a7146102145780631f931c1c146102495780632c40805914610269576101a1565b366101a157005b60006101ab6105a5565b90506001600160a01b0381163b6101ee576040517f87c9fc3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3660008037600080366000845af43d6000803e80801561020d573d6000f35b3d6000fd5b005b34801561022057600080fd5b5061023461022f3660046128ff565b6105ba565b60405190151581526020015b60405180910390f35b34801561025557600080fd5b5061021261026436600461297b565b610630565b34801561027557600080fd5b5061027e6106ba565b6040516001600160a01b039091168152602001610240565b3480156102a257600080fd5b506102126102b1366004612a2a565b6106ed565b3480156102c257600080fd5b506102126102d1366004612a43565b61070d565b3480156102e257600080fd5b506102eb610763565b6040516102409190612a60565b34801561030457600080fd5b50610212610313366004612abb565b610939565b34801561032457600080fd5b50610212610333366004612bf8565b61098d565b34801561034457600080fd5b50610212610a15565b34801561035957600080fd5b50610362610a71565b6040516102409190612c84565b34801561037b57600080fd5b5061027e610f20565b34801561039057600080fd5b5061027e610f2a565b3480156103a557600080fd5b506102126103b4366004612a43565b610f34565b3480156103c557600080fd5b506102126103d4366004612d01565b610fb7565b3480156103e557600080fd5b506102126103f4366004612d01565b61100b565b34801561040557600080fd5b50610212610414366004612d1f565b611015565b34801561042557600080fd5b50610234610434366004612d61565b611025565b34801561044557600080fd5b50610459610454366004612d98565b611080565b6040516102409190612e2a565b34801561047257600080fd5b50610486610481366004612a43565b611095565b6040516102409190612e8c565b34801561049f57600080fd5b506102346104ae3660046128ff565b611214565b3480156104bf57600080fd5b5061027e6104ce3660046128ff565b6001600160e01b03191660009081527f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc93602052604090205460601c90565b34801561051857600080fd5b5061052c610527366004612a2a565b61140d565b60405167ffffffffffffffff9091168152602001610240565b34801561055157600080fd5b50610459610560366004612e9f565b61144a565b34801561057157600080fd5b50610234610580366004612eeb565b611457565b34801561059157600080fd5b506102126105a0366004612a43565b6114a6565b60006105af611578565b905090565b3b151590565b6001600160e01b0319811660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d8602052604081205460ff168061062a57507f4fbf0433000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6106386115eb565b6001600160a01b0316336001600160a01b03161461066957604051632f7a8ee160e01b815260040160405180910390fd5b6106b36106768587612f19565b8484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061161e92505050565b5050505050565b60006105af7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc96546001600160a01b031690565b806106f781611834565b61070057600080fd5b61070982611882565b5050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f671680460546001600160a01b0316331461075757604051632f7a8ee160e01b815260040160405180910390fd5b6107608161195a565b50565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94546060907f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff1667ffffffffffffffff8111156107c6576107c6612af2565b6040519080825280602002602001820160405280156107ef578160200160208202803683370190505b50915060008060005b600184015461ffff16821015610931576000818152600285016020526040812054905b600881101561091c578361082e81613002565b600188015490955061ffff168511905061091c57600581901b82901b6001600160e01b0319811660009081526020889052604081205460601c90805b888110156108bf578a81815181106108845761088461301c565b60200260200101516001600160a01b0316836001600160a01b0316036108ad57600191506108bf565b806108b781613002565b91505061086a565b5080156108ce5750505061090a565b818a89815181106108e1576108e161301c565b6001600160a01b03909216602092830291909101909101528761090381613002565b9850505050505b8061091481613002565b91505061081b565b5050808061092990613002565b9150506107f8565b505082525090565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f671680460546001600160a01b0316331461098357604051632f7a8ee160e01b815260040160405180910390fd5b61070982826119f4565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f671680460546001600160a01b031633146109d757604051632f7a8ee160e01b815260040160405180910390fd5b815160005b81811015610a0f57610a078482815181106109f9576109f961301c565b6020026020010151846119f4565b6001016109dc565b50505050565b610a1d611a83565b6001600160a01b0316336001600160a01b031614610a67576040517fefd1052d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a6f611aab565b565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94546060907f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff1667ffffffffffffffff811115610ad457610ad4612af2565b604051908082528060200260200182016040528015610b1a57816020015b604080518082019091526000815260606020820152815260200190600190039081610af25790505b50600182015490925060009061ffff1667ffffffffffffffff811115610b4257610b42612af2565b604051908082528060200260200182016040528015610b6b578160200160208202803683370190505b50905060008060005b600185015461ffff16821015610eae576000818152600286016020526040812054905b6008811015610e995783610baa81613002565b600189015490955061ffff1685119050610e9957600581901b82901b6001600160e01b0319811660009081526020899052604081205460601c90805b88811015610d2d57826001600160a01b03168c8281518110610c0a57610c0a61301c565b6020026020010151600001516001600160a01b031603610d1b57838c8281518110610c3757610c3761301c565b6020026020010151602001518b8381518110610c5557610c5561301c565b602002602001015160ff1681518110610c7057610c7061301c565b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505060ff8a8281518110610cd057610cd061301c565b602002602001015160ff1610610ce557600080fd5b898181518110610cf757610cf761301c565b602002602001018051809190610d0c90613032565b60ff1690525060019150610d2d565b80610d2581613002565b915050610be6565b508015610d3c57505050610e87565b818b8981518110610d4f57610d4f61301c565b60209081029190910101516001600160a01b03909116905260018a015461ffff1667ffffffffffffffff811115610d8857610d88612af2565b604051908082528060200260200182016040528015610db1578160200160208202803683370190505b508b8981518110610dc457610dc461301c565b602002602001015160200181905250828b8981518110610de657610de661301c565b602002602001015160200151600081518110610e0457610e0461301c565b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815250506001898981518110610e6457610e6461301c565b60ff9092166020928302919091019091015287610e8081613002565b9850505050505b80610e9181613002565b915050610b97565b50508080610ea690613002565b915050610b74565b5060005b82811015610f15576000848281518110610ece57610ece61301c565b602002602001015160ff1690506000878381518110610eef57610eef61301c565b602002602001015160200151905081815250508080610f0d90613002565b915050610eb2565b508185525050505090565b60006105af611a83565b60006105af6115eb565b610f3c6115eb565b6001600160a01b0316336001600160a01b031614610f6d57604051632f7a8ee160e01b815260040160405180910390fd5b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc96805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f671680460546001600160a01b0316331461100157604051632f7a8ee160e01b815260040160405180910390fd5b6107098282611af2565b6107098282611b94565b611020838383611cc2565b505050565b6001600160a01b0380841660009081527f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dc260209081526040808320868452825280832093851683529290529081205460ff165b949350505050565b606061108e60008484611db9565b9392505050565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94546060907f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff1667ffffffffffffffff8111156110f8576110f8612af2565b604051908082528060200260200182016040528015611121578160200160208202803683370190505b50915060008060005b600184015461ffff1682101561120a576000818152600285016020526040812054905b60088110156111f5578361116081613002565b600188015490955061ffff16851190506111f557600581901b82901b6001600160e01b0319811660009081526020889052604090205460601c6001600160a01b038a16036111e257808887815181106111bb576111bb61301c565b6001600160e01b031990921660209283029190910190910152856111de81613002565b9650505b50806111ed81613002565b91505061114d565b5050808061120290613002565b91505061112a565b5050825250919050565b60007f4fbf0433000000000000000000000000000000000000000000000000000000006001600160e01b031983161490506000306001600160a01b03166352ef6b2c6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611285573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112ad9190810190613051565b805190915060005b8181101561140557306001600160a01b03168382815181106112d9576112d961301c565b60200260200101516001600160a01b031603156112b5576000808483815181106113055761130561301c565b60200260200101516001600160a01b03166301ffc9a760e01b8860405160240161133f91906001600160e01b031991909116815260200190565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990941693909317909252905161139291906130eb565b600060405180830381855afa9150503d80600081146113cd576040519150601f19603f3d011682016040523d82523d6000602084013e6113d2565b606091505b509150915081156113fb5785806113f85750808060200190518101906113f89190613107565b95505b50506001016112b5565b505050919050565b60008181527f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dc3602052604081205467ffffffffffffffff1661062a565b6060611078848484611db9565b6001600160a01b0380831660009081527f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dc16020908152604080832093851683529290529081205460ff1661108e565b6114ae6115eb565b6001600160a01b0316336001600160a01b0316146114df57604051632f7a8ee160e01b815260040160405180910390fd5b61076081611f92565b7ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d890565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b7f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbe90565b600080356001600160e01b03191681527f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc93602052604090205460601c806115e857507f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc96546001600160a01b031690565b90565b60007f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605b546001600160a01b0316919050565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94547f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff81169081906000906007161561168d5750600381901c60009081526002840160205260409020545b60005b875181101561178b5760008882815181106116ad576116ad61301c565b602002602001015190506000816020015190508160400151516000036116ff576040517feb6c3aeb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081600281111561171357611713613124565b0361172e5761172487868685611fe0565b9095509350611781565b600181600281111561174257611742613124565b0361175657611751878361213d565b611781565b600281600281111561176a5761176a613124565b036117815761177b878686856122d3565b90955093505b5050600101611690565b508282146117c4576001840180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff84161790555b60078216156117e657600382901c600090815260028501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738787876040516118199392919061313a565b60405180910390a161182b868661255b565b50505050505050565b60007f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbe61186083612654565b8061108e575033600090815260028201602052604090205460ff169392505050565b60008181527f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dc36020526040812080547f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbe9267ffffffffffffffff90911691906118ea83613216565b82546101009290920a67ffffffffffffffff81810219909316918316021790915560008481526005840160209081526040918290205491519190921681528492507fc6621ccb8f3f5a04bb6502154b2caf6adf5983fe76dfef1cfc9c42e3579db444910160405180910390a25050565b7f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbf805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbe91907f2a3953a00c61e46ecb4a26a52aba9acbbf214c988422bb25322bf64fc5cc15fd90600090a25050565b6001600160e01b03198083169003611a38576040517fb0a19dd500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160e01b03199190911660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d860205260409020805460ff1916911515919091179055565b60007f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce661789061160f565b611ab43361285b565b7f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce6617890805473ffffffffffffffffffffffffffffffffffffffff19169055565b6001600160a01b03821660008181527f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dc06020908152604091829020805460ff191685151590811790915591519182527f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbe92917f26742d25b283cf51a0e3c4183d934871ed96d1bd33cf40706f87a94f29f686ac910160405180910390a2505050565b6001600160a01b0382163303611c175760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b3360008181527f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dc1602090815260408083206001600160a01b03871680855290835292819020805460ff1916861515908117909155815190815290517f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbe94927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31928290030190a3505050565b6001600160a01b0382163303611d1a5760405162461bcd60e51b815260206004820181905260248201527f53657474696e672064656c65676174652073746174757320666f722073656c666044820152606401611c0e565b60007f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbe336000818152600483016020908152604080832089845282528083206001600160a01b03891680855290835292819020805460ff19168815159081179091559051938452939450909187917ff0ddb3b04746704017f9aa8bd728fcc2c1d11675041205350018915f5e4750a0910160405180910390a450505050565b60608167ffffffffffffffff811115611dd457611dd4612af2565b604051908082528060200260200182016040528015611e0757816020015b6060815260200190600190039081611df25790505b50905060005b82811015611f8a578415611ed2576000848483818110611e2f57611e2f61301c565b9050602002810190611e41919061323d565b611e50916024916004916132a2565b611e59916132cc565b9050858114611ed05760405162461bcd60e51b815260206004820152603460248201527f6d756c746963616c6c3a20416c6c207265636f726473206d757374206861766560448201527f2061206d61746368696e67206e616d65686173680000000000000000000000006064820152608401611c0e565b505b60008030868685818110611ee857611ee861301c565b9050602002810190611efa919061323d565b604051611f089291906132ea565b600060405180830381855af49150503d8060008114611f43576040519150601f19603f3d011682016040523d82523d6000602084013e611f48565b606091505b509150915081611f5757600080fd5b80848481518110611f6a57611f6a61301c565b602002602001018190525050508080611f8290613002565b915050611e0d565b509392505050565b7f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce6617890805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556107608181565b805160009081906001600160a01b03163014801590612008575082516001600160a01b03163b155b1561202657604051633ddc5cab60e21b815260040160405180910390fd5b60005b8360400151518110156121305760008460400151828151811061204e5761204e61301c565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c156120b3576040517f92474ee200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85516001600160e01b0319838116600081815260208d90526040902060609390931b6bffffffffffffffffffffffff19168b1790925560058a901b60e090811692831c91831c1999909916179781900361212157600389901c600090815260028b0160205260408120989098555b50505060019586019501612029565b5093959294509192505050565b80516001600160a01b03163b61216657604051633ddc5cab60e21b815260040160405180910390fd5b60005b8160400151518110156110205760008260400151828151811061218e5761218e61301c565b6020908102919091018101516001600160e01b03198116600090815291869052604090912054909150606081901c806121f3576040517f6fc4b52e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b306001600160a01b03821603612235576040517fe983573100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84600001516001600160a01b0316816001600160a01b031603612284576040517f617557e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5083516001600160e01b031992909216600090815260208690526040902060609290921b6bffffffffffffffffffffffff19166bffffffffffffffffffffffff91909116179055600101612169565b805160009081906001600160a01b03161561231a576040517feacd242400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600385901c6007861660005b8560400151518110156125475760008660400151828151811061234b5761234b61301c565b6020908102919091018101516001600160e01b031981166000908152918c9052604090912054909150606081901c6123af576040517f6fc4b52e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b30606082901c036123ec576040517fe983573100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600089900361241857600019909401600081815260028c01602052604090205498509360079350612420565b600019909301925b600584901b89901b6000806001600160e01b03198084169086161461247c576001600160e01b03198316600090815260208f90526040902080546bffffffffffffffffffffffff19166bffffffffffffffffffffffff86161790555b50506001600160e01b03198316600090815260208d90526040812055611fff600383901c1660e0600584901b168782146124df57600082815260028f016020526040902080546001600160e01b031980841c19909116908516831c179055612518565b80837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c816001600160e01b031960001b901c198d16179b505b8660000361253657600088815260028f01602052604081208190559b505b505060019093019250612326915050565b5060039190911b1796939550929350505050565b8051156001600160a01b03831615146125a0576040517f26df4ccd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03821615610709576001600160a01b03821630146125e7576001600160a01b0382163b6125e757604051633ddc5cab60e21b815260040160405180910390fd5b6000826001600160a01b03168260405161260191906130eb565b600060405180830381855af49150503d806000811461263c576040519150601f19603f3d011682016040523d82523d6000602084013e612641565b606091505b5050905080611020573d6000803e3d6000fd5b6000807f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dbe80546040517f02571be3000000000000000000000000000000000000000000000000000000008152600481018690529192506000916001600160a01b03909116906302571be390602401602060405180830381865afa1580156126df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270391906132fa565b60018301549091506001600160a01b03908116908216036127a95760018201546040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018690526001600160a01b0390911690636352211e90602401602060405180830381865afa158015612782573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a691906132fa565b90505b6001600160a01b03811633148061280257506001600160a01b03811660009081527f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dc16020908152604080832033845290915290205460ff165b8061107857506001600160a01b03811660009081527f8c151f2b073b889ff2e1725375750783c091724f29d93246786f4cca8f047dc260209081526040808320878452825280832033845290915290205460ff16611078565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046080546040516001600160a01b038481169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b80356001600160e01b0319811681146128fa57600080fd5b919050565b60006020828403121561291157600080fd5b61108e826128e2565b60008083601f84011261292c57600080fd5b50813567ffffffffffffffff81111561294457600080fd5b6020830191508360208260051b850101111561295f57600080fd5b9250929050565b6001600160a01b038116811461076057600080fd5b60008060008060006060868803121561299357600080fd5b853567ffffffffffffffff808211156129ab57600080fd5b6129b789838a0161291a565b9097509550602088013591506129cc82612966565b909350604087013590808211156129e257600080fd5b818801915088601f8301126129f657600080fd5b813581811115612a0557600080fd5b896020828501011115612a1757600080fd5b9699959850939650602001949392505050565b600060208284031215612a3c57600080fd5b5035919050565b600060208284031215612a5557600080fd5b813561108e81612966565b6020808252825182820181905260009190848201906040850190845b81811015612aa15783516001600160a01b031683529284019291840191600101612a7c565b50909695505050505050565b801515811461076057600080fd5b60008060408385031215612ace57600080fd5b612ad7836128e2565b91506020830135612ae781612aad565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715612b2b57612b2b612af2565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612b5a57612b5a612af2565b604052919050565b600067ffffffffffffffff821115612b7c57612b7c612af2565b5060051b60200190565b600082601f830112612b9757600080fd5b81356020612bac612ba783612b62565b612b31565b82815260059290921b84018101918181019086841115612bcb57600080fd5b8286015b84811015612bed57612be0816128e2565b8352918301918301612bcf565b509695505050505050565b60008060408385031215612c0b57600080fd5b823567ffffffffffffffff811115612c2257600080fd5b612c2e85828601612b86565b9250506020830135612ae781612aad565b600081518084526020808501945080840160005b83811015612c795781516001600160e01b03191687529582019590820190600101612c53565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015612cf357888303603f19018552815180516001600160a01b03168452870151878401879052612ce087850182612c3f565b9588019593505090860190600101612cab565b509098975050505050505050565b60008060408385031215612d1457600080fd5b8235612ad781612966565b600080600060608486031215612d3457600080fd5b833592506020840135612d4681612966565b91506040840135612d5681612aad565b809150509250925092565b600080600060608486031215612d7657600080fd5b8335612d8181612966565b9250602084013591506040840135612d5681612966565b60008060208385031215612dab57600080fd5b823567ffffffffffffffff811115612dc257600080fd5b612dce8582860161291a565b90969095509350505050565b60005b83811015612df5578181015183820152602001612ddd565b50506000910152565b60008151808452612e16816020860160208601612dda565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612e7f57603f19888603018452612e6d858351612dfe565b94509285019290850190600101612e51565b5092979650505050505050565b60208152600061108e6020830184612c3f565b600080600060408486031215612eb457600080fd5b83359250602084013567ffffffffffffffff811115612ed257600080fd5b612ede8682870161291a565b9497909650939450505050565b60008060408385031215612efe57600080fd5b8235612f0981612966565b91506020830135612ae781612966565b6000612f27612ba784612b62565b80848252602080830192508560051b850136811115612f4557600080fd5b855b81811015612fe057803567ffffffffffffffff80821115612f685760008081fd5b818901915060608236031215612f7e5760008081fd5b612f86612b08565b8235612f9181612966565b81528286013560038110612fa55760008081fd5b8187015260408381013583811115612fbd5760008081fd5b612fc936828701612b86565b918301919091525087525050938201938201612f47565b50919695505050505050565b634e487b7160e01b600052601160045260246000fd5b6000600019820361301557613015612fec565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff810361304857613048612fec565b60010192915050565b6000602080838503121561306457600080fd5b825167ffffffffffffffff81111561307b57600080fd5b8301601f8101851361308c57600080fd5b805161309a612ba782612b62565b81815260059190911b820183019083810190878311156130b957600080fd5b928401925b828410156130e05783516130d181612966565b825292840192908401906130be565b979650505050505050565b600082516130fd818460208701612dda565b9190910192915050565b60006020828403121561311957600080fd5b815161108e81612aad565b634e487b7160e01b600052602160045260246000fd5b6000606080830181845280875180835260808601915060808160051b87010192506020808a016000805b848110156131f1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808a880301865282516001600160a01b03815116885284810151600381106131c257634e487b7160e01b84526021600452602484fd5b888601526040908101519088018990526131de89890182612c3f565b9750509483019491830191600101613164565b5050506001600160a01b03891690870152505083810360408501526130e08186612dfe565b600067ffffffffffffffff80831681810361323357613233612fec565b6001019392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261327257600080fd5b83018035915067ffffffffffffffff82111561328d57600080fd5b60200191503681900382131561295f57600080fd5b600080858511156132b257600080fd5b838611156132bf57600080fd5b5050820193919092039150565b8035602083101561062a57600019602084900360031b1b1692915050565b8183823760009101908152919050565b60006020828403121561330c57600080fd5b815161108e8161296656fea26469706673582212205991c4da683a90645735a55ef5c7bc831287518f1c35cd0271ecc95d03be566e64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(bytes32,address,bool)": {
        "details": "Approve a delegate to be able to updated records on a node."
      },
      "clearRecords(bytes32)": {
        "params": {
          "node": "The node to update."
        }
      },
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "params": {
          "data": "optional initialization function call data",
          "facetCuts": "array of structured Diamond facet update data",
          "target": "optional target of initialization delegatecall"
        }
      },
      "facetAddress(bytes4)": {
        "params": {
          "selector": "function selector to query"
        },
        "returns": {
          "facet": "facet address (zero address if not found)"
        }
      },
      "facetAddresses()": {
        "returns": {
          "addresses": "array of facet addresses"
        }
      },
      "facetFunctionSelectors(address)": {
        "params": {
          "facet": "address of facet to query"
        },
        "returns": {
          "selectors": "array of function selectors"
        }
      },
      "facets()": {
        "returns": {
          "diamondFacets": "array of structured facet data"
        }
      },
      "getFallbackAddress()": {
        "returns": {
          "fallbackAddress": "address of fallback implementation"
        }
      },
      "isApprovedFor(address,bytes32,address)": {
        "details": "Check to see if the delegate has been approved by the owner for the node."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "returns": {
          "_0": "contract owner"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setFallbackAddress(address)": {
        "params": {
          "fallbackAddress": "address of fallback implementation"
        }
      },
      "transferOwnership(address)": {
        "params": {
          "account": "address of new owner"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "accept transfer of contract ownership"
      },
      "clearRecords(bytes32)": {
        "notice": "Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry."
      },
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "update diamond facets and optionally execute arbitrary initialization function"
      },
      "facetAddress(bytes4)": {
        "notice": "get the address of the facet associated with given selector"
      },
      "facetAddresses()": {
        "notice": "get addresses of all facets used by diamond"
      },
      "facetFunctionSelectors(address)": {
        "notice": "get all selectors for given facet address"
      },
      "facets()": {
        "notice": "get all facets and their selectors"
      },
      "getFallbackAddress()": {
        "notice": "query the address of the fallback implementation"
      },
      "nomineeOwner()": {
        "notice": "get the nominated owner who has permission to call acceptOwnership"
      },
      "owner()": {
        "notice": "get the ERC173 contract owner"
      },
      "setFallbackAddress(address)": {
        "notice": "set the address of the fallback implementation"
      },
      "transferOwnership(address)": {
        "notice": "transfer contract ownership to new account"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}